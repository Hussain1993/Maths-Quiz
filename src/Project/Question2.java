/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Question2.java
 *
 * Created on 26-Jan-2011, 21:52:48
 */

package Project;
import java.sql.*;
import java.util.ArrayList;

/**
 *
 * @author kk
 */
public class Question2 extends javax.swing.JFrame {

    /** Creates new form Question2 */
    int quiznum = 0;
    String quizLevel = "";
    String pupilnum = "";
    int pointsPupil2 = 0;
    public Question2(int quizNum,String quizlevel,String pupilNum,int pointsPupil) {
        initComponents();
        lblMethod.setVisible(false);
        quiznum = quizNum;
        quizLevel = quizlevel;
        pupilnum = pupilNum;
        pointsPupil2 = pointsPupil;
        if (quizLevel.equals("Hard"))//disply the type of question depending on the skill level the pupil has been set
        {
            displayQuestionHard();
        }
        else
        {
            displayQuestionEasy();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblQuestion = new javax.swing.JLabel();
        lblMethod = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        lblPoints = new javax.swing.JLabel();
        cboAnswer = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Question 2");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Question 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblQuestion.setFont(new java.awt.Font("Tahoma", 0, 18));
        lblQuestion.setText("jLabel1");

        lblMethod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblMethod.setText("Method here");

        btnNext.setText("Next >");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblPoints.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPoints.setText("jLabel1");

        cboAnswer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pick Answer:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuestion)
                    .addComponent(lblMethod)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPoints)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 243, Short.MAX_VALUE)
                        .addComponent(btnNext))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuestion)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(lblMethod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(lblPoints))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (quizLevel.equals("Hard"))//check the answer to the question depending on the type of skill level set
        {
            checkAnswerHard();
        }
        else
        {
            checkAnswerEasy();
        }
        
    }//GEN-LAST:event_btnNextActionPerformed
public void displayQuestionHard(){
    //this displays a Hard difficulty setting question
    //set up array list to hold values retrived from the database
    ArrayList<String>Questions = new ArrayList();
    ArrayList<String>Method = new ArrayList();
    ArrayList<Integer>Points = new ArrayList<Integer>();
      try{
          DatabaseConnect.init();
          Connection conn = DatabaseConnect.getConnection();
          Statement stmt = conn.createStatement();
          ResultSet result = stmt.executeQuery("SELECT QUESTION,QUESTION_METHOD,POINTS FROM QUIZ_QUESTIONS WHERE QUIZ_NUMBER="+quiznum+"AND QUESTION_LEVEL='"+quizLevel+"'");
          while (result.next())
          {
              //add the values to the array
              Questions.add(result.getString("QUESTION"));
              Method.add(result.getString("QUESTION_METHOD"));
              Points.add(result.getInt("POINTS"));
          }
          lblQuestion.setText(Questions.get(1));//display the question
          lblMethod.setText(Method.get(1));//display the method but it will not be visible to the user
          lblPoints.setText("This question is worth: "+Points.get(1).toString()+" point(s)");//display the number points the question is worth
          setAnswerHard(Questions);//add values to the combo box in the user interface, answers that are stored in the combo box will relate to the question that is being asked
          stmt.close();
          conn.close();
          result.close();
      }//end try
      catch(Exception ex){
          System.err.print("SQLException: ");
          System.err.println(ex.getMessage());
      }
}//end method
public void checkAnswerHard(){
    //this checks the answer for a hard difficulty questions
    //set up array list to hold values
    String answer = cboAnswer.getSelectedItem().toString();//get what is selected in the combo box
    ArrayList<String>Answers = new ArrayList();
    ArrayList<Integer>Points = new ArrayList();
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT POINTS,QUESTION_ANSWER FROM QUIZ_QUESTIONS WHERE QUIZ_NUMBER="+quiznum+" AND QUESTION_LEVEL='"+quizLevel+"'");
        while (result.next())
        {
            //add values to the array
            Answers.add(result.getString("QUESTION_ANSWER"));
            Points.add(result.getInt("POINTS"));
        }
        if (answer.equals(Answers.get(1)))//check if the naswer is correct
        {
            pointsPupil2 += Points.get(1);//the n umber of points that this question is worth gets added to the pupil total points
            this.dispose();
            new EndQuiz(pointsPupil2,quiznum,pupilnum).setVisible(true);//opens window to tell the user that the quiz has finished, adds the pupil score to the database
        }
        else
        {
            lblMethod.setVisible(true);
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
public void displayQuestionEasy(){
    //this displays a easy difficulty setting question
    //set up array list to hold values
    ArrayList<String>Questions = new ArrayList();
    ArrayList<String>Method = new ArrayList();
    ArrayList<Integer>Points = new ArrayList<Integer>();
      try{
          DatabaseConnect.init();
          Connection conn = DatabaseConnect.getConnection();
          Statement stmt = conn.createStatement();
          ResultSet result = stmt.executeQuery("SELECT QUESTION,QUESTION_METHOD,POINTS FROM QUIZ_QUESTIONS WHERE QUIZ_NUMBER="+quiznum+"AND QUESTION_LEVEL='"+quizLevel+"'");
          while (result.next())
          {
              //add values to the array list
              Questions.add(result.getString("QUESTION"));
              Method.add(result.getString("QUESTION_METHOD"));
              Points.add(result.getInt("POINTS"));
          }
          lblQuestion.setText(Questions.get(1));//display question
          lblMethod.setText(Method.get(1));//display method but it will not be visible to the end user
          lblPoints.setText("This question is worth: "+Points.get(1).toString()+" point(s)");//this displays the number of points that this question is worth
          setAnswerEasy(Questions);//set answers for the combo box on the user interface
          stmt.close();
          conn.close();
          result.close();
      }//end try
      catch(Exception ex){
          System.err.print("SQLException: ");
          System.err.println(ex.getMessage());
      }
}//end method
public void checkAnswerEasy(){
    //check the answer for a easy difficulty setting question
    String answer = cboAnswer.getSelectedItem().toString();//get the selected answer from the combo box
    ArrayList<String>Answers = new ArrayList();
    ArrayList<Integer>Points = new ArrayList();
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT POINTS,QUESTION_ANSWER FROM QUIZ_QUESTIONS WHERE QUIZ_NUMBER="+quiznum+" AND QUESTION_LEVEL='"+quizLevel+"'");
        while (result.next())
        {
            //add the values to the array list
            Answers.add(result.getString("QUESTION_ANSWER"));
            Points.add(result.getInt("POINTS"));
        }
        if (answer.equals(Answers.get(1)))//check if answer is correct
        {
            pointsPupil2 += Points.get(1);//add points to the total number of points the pupil has got
            this.dispose();
            new EndQuiz(pointsPupil2,quiznum,pupilnum).setVisible(true);//this displays a new window telling the user that the quiz has finished and the pupil score gets added to the database
        }
        else
        {
            lblMethod.setVisible(true);//set the method to true if they answer the question worng
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
public void setAnswerHard(ArrayList<String> Questions){
    String answer = "";
    //this sets the possible answers to the question
    //in the combo box - the answers relate to the question, for example
    //this method will onlly write items to the combo box,
    //that relate to the hard difficulty setting of the question
    cboAnswer.removeAllItems();
    //this deletes everything in the combo box
    String question = Questions.get(1);//get the question
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT QUESTION_ANSWER FROM QUIZ_QUESTIONS WHERE QUESTION ='"+question+"'");//get the answer to the question
        if (result != null && result.next())
        {
            answer = result.getString("QUESTION_ANSWER");
        }
        //add items to the combo box depending on the quiz number
        if (quiznum == 2)
        {
            cboAnswer.addItem("600");
            cboAnswer.addItem("6000");
            cboAnswer.addItem("60");
            cboAnswer.addItem(answer);
        }
        else if (quiznum == 4)
        {
            cboAnswer.addItem(answer);
            cboAnswer.addItem("20");
            cboAnswer.addItem("2");
            cboAnswer.addItem("201");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException :");
        System.err.println(ex.getMessage());
    }
}//end method
public void setAnswerEasy(ArrayList<String> Questions){
    //this sets the possible answers to the question
    //in the combo box - the answers relate to the question, for example
    //this method will onlly write items to the combo box,
    //that relate to the easy difficulty setting of the question
    cboAnswer.removeAllItems();
    String question = Questions.get(1);//get the question
    String answer = "";
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT QUESTION_ANSWER FROM QUIZ_QUESTIONS WHERE QUESTION ='"+question+"'");//get the answer for the question from the database
        if (result != null && result.next())
        {
            answer = result.getString("QUESTION_ANSWER");
        }
        //add items to the combo box depending on the quiz number
        if (quiznum == 1)
        {
            cboAnswer.addItem("100");
            cboAnswer.addItem("20");
            cboAnswer.addItem("15");
            cboAnswer.addItem(answer);
        }
        else if (quiznum == 3)
        {
            cboAnswer.addItem("0");
            cboAnswer.addItem("9");
            cboAnswer.addItem(answer);
            cboAnswer.addItem("11");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
    /**
    * @param args the command line arguments
    */
    /**
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Question2().setVisible(true);
            }
        });
    }
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox cboAnswer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMethod;
    private javax.swing.JLabel lblPoints;
    private javax.swing.JLabel lblQuestion;
    // End of variables declaration//GEN-END:variables

}
