/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PupilHWRecord.java
 *
 * Created on 25-Jan-2011, 17:10:35
 */

package Project;
import java.awt.print.PrinterException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.*;

/**
 *
 * @author kk
 */
public class PupilHWRecord extends javax.swing.JFrame {

    /** Creates new form PupilHWRecord */
    String pupilNum = "";
    public PupilHWRecord(String pupil,String first) {
        initComponents();
        lblWel.setText("This is the Homework record for: "+first);
        pupilNum = pupil;
        display();//display all the homework records for the pupil
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHW = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnHW = new javax.swing.JButton();
        btnMain = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pupil Homework Record");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pupil Homework Record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblWel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWel.setText("jLabel1");

        tblHW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Pupil Number", "First Name", "Last Name", "Homework Title", "Score", "Max Score", "Percentage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHW);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnHW.setText("Add Homework");
        btnHW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHWActionPerformed(evt);
            }
        });

        btnMain.setText("Main Menu");
        btnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainActionPerformed(evt);
            }
        });

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMain)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnHW)
                    .addComponent(btnPrint)
                    .addComponent(btnMain))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblSearch.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblSearch.setText("Search:");

        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnShow.setText("Show All Data");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnShow)
                    .addComponent(lblMessage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainActionPerformed
        // Displays the main menu
        this.dispose();
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_btnMainActionPerformed

    private void btnHWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHWActionPerformed
        // Opens a new form to add another homework sheet
        this.dispose();
        new InsertHW().setVisible(true);
    }//GEN-LAST:event_btnHWActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         int row = tblHW.getSelectedRow();
         try{
             if (row == -1)
             {
                 throw new Exception ("Row not selected");
             }
             else
             {
                 int n = JOptionPane.showConfirmDialog(this, "Do you want to delete this record?","Delete record",JOptionPane.YES_NO_OPTION);//asking the user if they want to delete a pupil homework record
                 switch (n)
                 {
                     case 0 : delete();break;//pressing "Yes"
                     case 1 : break;//pressing "No"
                 }
             }//end else
         }//end try
         catch(Exception e){
            lblMessage.setText(e.getMessage());
         }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        display();
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        int n = JOptionPane.showConfirmDialog(this, "Do you want to print these records","Print record",JOptionPane.YES_NO_OPTION);//asking the user if they want to print the table
        switch (n)
        {
            case 0 : try {
            print();//print the table
            } catch (PrinterException ex) {
            Logger.getLogger(PupilHWRecord.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
            case 1 : break;//pressing "No"
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        try{
            if (txtSearch.getText().isEmpty())
            {
                throw new Exception ("Search feild empty");
            }
            else
            {
                throw new Exception ("");
            }
        }
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtSearchFocusLost
  public void display(){
      //displays all records
      String first = "";
      String last = "";
      String title = "";
      double score = 0;
      double max = 0;
      double percent = 0;
       try{
           DatabaseConnect.init();
           Connection conn = DatabaseConnect.getConnection();
           Statement stmt = conn.createStatement();
           ResultSet result = stmt.executeQuery("SELECT PUPIL_HOMEWORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_HOMEWORK.HOMEWORK_TITLE,PUPIL_HOMEWORK.HOMEWORK_SCORE,HOMEWORK.MAX_SCORE FROM PUPILS,PUPIL_HOMEWORK,HOMEWORK WHERE PUPIL_HOMEWORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_HOMEWORK.HOMEWORK_TITLE=HOMEWORK.HOMEWORK_TITLE AND (PUPIL_HOMEWORK.PUPIL_NUMBER='"+pupilNum+"')");
           DefaultTableModel model = (DefaultTableModel)tblHW.getModel();
           if (result != null)
           {
               while (model.getRowCount()>0)
               {
                   model.removeRow(0);
               }
               while (result.next())
               {
                   first = result.getString("PUPIL_FIRST_NAME");
                   last = result.getString("PUPIL_LAST_NAME");
                   title = result.getString("HOMEWORK_TITLE");
                   score = result.getInt("HOMEWORK_SCORE");
                   max = result.getInt("MAX_SCORE");
                   percent = Math.floor((score/max)*100);//calculate the percentage of the score
                   //change everything to an int
                   int scoreI = (int)score;
                   int maxI = (int)max;
                   int percentI = (int)percent;
                   model.addRow(new Object[]{pupilNum,first,last,title,scoreI,maxI,percentI});
               }
           }//end if
           lblMessage.setText("");
           stmt.close();
           conn.close();
           result.close();
       }//end try
       catch(Exception ex){
           System.err.print("SQLException: ");
           System.err.println(ex.getMessage());
       }
  }//end method
  public void edit(){
      //edit the record
        int row = tblHW.getSelectedRow();
        String first = "";
        String last = "";
        String title = "";
        int score = 0;
        try{
            if (row == -1)
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                first = (String)tblHW.getValueAt(row, 1);
                last = (String)tblHW.getValueAt(row, 2);
                title = (String)tblHW.getValueAt(row, 3);
                score = (Integer)tblHW.getValueAt(row, 4);
                try{
                    DatabaseConnect.init();
                    Connection conn = DatabaseConnect.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate("UPDATE PUPILS SET PUPIL_FIRST_NAME='"+first+"',PUPIL_LAST_NAME='"+last+"' WHERE PUPIL_NUMBER='"+pupilNum+"'");
                    stmt.executeUpdate("UPDATE PUPIL_HOMEWORK SET HOMEWORK_TITLE='"+title+"',HOMEWORK_SCORE="+score+" WHERE PUPIL_NUMBER='"+pupilNum+"' AND HOMEWORK_TITLE='"+title+"'");
                    ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS WHERE PUPIL_FIRST_NAME='"+first+"' AND PUPIL_LAST_NAME='"+last+"'");
                    if (result.next())
                    {
                        display();//update the table on the user interface with the updated details
                    }
                    stmt.close();
                    conn.close();
                    result.close();
                }//end try
                catch(Exception ex){
                    System.err.print("SQLException: ");
                    System.err.println(ex.getMessage());
                }//end catch
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
  }//end method
  public void delete(){
      //this deletes a record from the database
        int row = tblHW.getSelectedRow();
        try{
            if (row == -1)
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                String title =  (String)tblHW.getValueAt(row,3);
                try{
                    DatabaseConnect.init();
                    Connection conn = DatabaseConnect.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate("DELETE FROM PUPIL_HOMEWORK WHERE PUPIL_NUMBER='"+pupilNum+"' AND HOMEWORK_TITLE='"+title+"'");//delete the record
                    ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_HOMEWORK WHERE PUPIL_NUMBER='"+pupilNum+"' AND HOMEWORK_TITLE='"+title+"'");//check that the record has been deleted
                    if (result.next())
                    {
                        lblMessage.setText("The record was not deleted");
                    }
                    else
                    {
                        display();//update the table
                    }
                    stmt.close();
                    conn.close();
                    result.close();
                }//end try
                catch(Exception ex){
                    System.err.print("SQLException: ");
                    System.err.println(ex.getMessage());
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
  }//end mehtod
  public void search(){
      //this seraches for a pupil homework record by the homework title
      String GUISearch = txtSearch.getText();
      try{
          if (GUISearch.isEmpty())
          {
              throw new Exception ("Search feild is blank");
          }
          else {
              String pupil = "";
              String first = "";
              String last = "";
              String title = "";
              double score = 0;
              double max = 0;
              double percent = 0;
              try {
                  DatabaseConnect.init();
                  Connection conn = DatabaseConnect.getConnection();
                  Statement stmt = conn.createStatement();
                  ResultSet result = stmt.executeQuery("SELECT PUPIL_HOMEWORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_HOMEWORK.HOMEWORK_TITLE,PUPIL_HOMEWORK.HOMEWORK_SCORE,HOMEWORK.MAX_SCORE FROM PUPILS,PUPIL_HOMEWORK,HOMEWORK WHERE PUPIL_HOMEWORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_HOMEWORK.HOMEWORK_TITLE=HOMEWORK.HOMEWORK_TITLE AND (PUPIL_HOMEWORK.HOMEWORK_TITLE='"+GUISearch+"' AND PUPIL_HOMEWORK.PUPIL_NUMBER='"+pupilNum+"')");
                  DefaultTableModel model = (DefaultTableModel) tblHW.getModel();
                  if (result != null)
                  {
                      while (model.getRowCount() > 0)
                      {
                          model.removeRow(0);
                      }
                      while (result.next())
                      {
                          pupil = result.getString("PUPIL_NUMBER");
                          first = result.getString("PUPIL_FIRST_NAME");
                          last = result.getString("PUPIL_LAST_NAME");
                          title = result.getString("HOMEWORK_TITLE");
                          score = result.getInt("HOMEWORK_SCORE");
                          max = result.getInt("MAX_SCORE");
                          percent = Math.floor((score/max)*100);//calculate the score
                          //change everything to int
                          int scoreI = (int)score;
                          int maxI = (int)max;
                          int percentI = (int)percent;
                          model.addRow(new Object[]{pupil, first, last, title, scoreI,maxI,percentI});
                      }
                      txtSearch.setText("");
                      lblMessage.setText("");
                  }//end if
                  else
                  {
                      lblMessage.setText("No records have been found");
                  }
                  stmt.close();
                  conn.close();
                  result.close();
              }//end try
              catch (Exception ex) {
                  System.err.print("SQLException: ");
                  System.err.println(ex.getMessage());
              }//end catch
          }//end else
      }//end try
      catch(Exception e){
          lblMessage.setText(e.getMessage());
      }//end catch
  }//END METHOD SEARCH
  public void print() throws PrinterException{
      //this prints the table
      tblHW.print();
  }
    /**
    * @param args the command line arguments
    */
    /**
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PupilHWRecord().setVisible(true);
            }
        });
    }
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHW;
    private javax.swing.JButton btnMain;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblWel;
    private javax.swing.JTable tblHW;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
