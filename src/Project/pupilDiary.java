/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * pupilDiary.java
 *
 * Created on 26-Dec-2010, 15:29:55
 */

package Project;

import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JOptionPane;

/**
 *
 * @author kk
 */
public class pupilDiary extends javax.swing.JFrame {

    /** Creates new form pupilDiary */
    public pupilDiary() {
        initComponents();
        allData();
        getNumber();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPupilDiary = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();
        lblPupilNumber = new javax.swing.JLabel();
        txtGUIPupilNumber = new javax.swing.JTextField();
        btnAll = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        lblFirst = new javax.swing.JLabel();
        txtGUIFirst = new javax.swing.JTextField();
        lblMessage2 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblWel2 = new javax.swing.JLabel();
        btnProfile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pupil Diary");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pupil Diary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        tblPupilDiary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Pupil Number", "First Name", "Last Name", "Address 1", "Address 2", "Postcode", "Telephone Number", "Date of Birth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPupilDiary);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblWelcome.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblWelcome.setText("This is the pupil Diary where all vital information about pupils is stored, search for a pupil by their Pupil Number or their First Name.");

        lblPupilNumber.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblPupilNumber.setText("Enter Pupil Number:");

        btnAll.setText("Show All Data");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMessage.setForeground(new java.awt.Color(255, 0, 0));
        lblMessage.setText("jLabel2");

        lblFirst.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblFirst.setText("Enter Pupil First Name:");

        txtGUIFirst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGUIFirstFocusLost(evt);
            }
        });

        lblMessage2.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMessage2.setForeground(new java.awt.Color(255, 0, 0));
        lblMessage2.setText("jLabel1");

        btnEdit.setText("Edit Record");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnMainMenu.setText("Back to Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Record");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblWel2.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblWel2.setText("jLabel1");

        btnProfile.setText("Pupil Profile");
        btnProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWelcome)
                    .addComponent(lblWel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPupilNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGUIPupilNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGUIFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMessage2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMainMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProfile))
                    .addComponent(lblMessage))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAll, btnDelete, btnEdit, btnMainMenu, btnSearch});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblWelcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPupilNumber)
                    .addComponent(txtGUIPupilNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirst)
                    .addComponent(txtGUIFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessage2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnAll)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnMainMenu)
                    .addComponent(btnProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtGUIPupilNumber.getText().length()>0 && txtGUIFirst.getText().length() == 0)
        {
            pupilDiary();
        }
        if (txtGUIPupilNumber.getText().length() == 0 && txtGUIFirst.getText().length() > 0)
        {
            firstPupil();
        }
        if (txtGUIPupilNumber.getText().length()> 0 && txtGUIFirst.getText().length() > 0)
        {
            NumFirst();
        }
}//GEN-LAST:event_btnSearchActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        allData();
        txtGUIPupilNumber.setText("");
        txtGUIFirst.setText("");
        lblMessage.setText("");
        lblMessage2.setText("");
    }//GEN-LAST:event_btnAllActionPerformed

    private void txtGUIFirstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGUIFirstFocusLost
        try{
        String patt = "^[A-Za-z]*$";//only letters
        Pattern regPat = Pattern.compile(patt);
        String first =  txtGUIFirst.getText();
        Matcher matcher = regPat.matcher(first);
        if (matcher.find())
        {
            lblMessage2.setText("");
        }
        else
        {
            throw new Exception ("Only letters");
        }
           }
        catch (Exception e){
             lblMessage2.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtGUIFirstFocusLost

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        this.dispose();
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        editTable();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblPupilDiary.getSelectedRow();
        try{
            if (row == -1)
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                int n = JOptionPane.showConfirmDialog(this, "Do you want to delete this record?","Delete record",JOptionPane.YES_NO_OPTION);
                switch (n)
                {
                    case 0 : delete(); break;
                    case 1 : break;
                }
            }
        }
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileActionPerformed
        getValues();
}//GEN-LAST:event_btnProfileActionPerformed
public void pupilDiary (){
    //this searches for a pupil by pupil number
    String GUIPupilNumber = txtGUIPupilNumber.getText();
    String pupilNumber = "";
    String firstName = "";
    String lastName = "";
    String address1 = "";
    String address2 = "";
    String post = "";
    String telephone = "";
    String birth = "";
    boolean found = false;
    try{
        //connect to the database
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        //enable SQL statements
        Statement stmt = conn.createStatement();
        String query = "SELECT PUPIL_NUMBER,PUPIL_FIRST_NAME,PUPIL_LAST_NAME" +
                ",ADDRESS_1,ADDRESS_2,POSTCODE,TELEPHONE_NUMBER,DATE_OF_BIRTH" +
                " FROM PUPILS WHERE PUPIL_NUMBER = '"+GUIPupilNumber+"'";
        ResultSet result = stmt.executeQuery(query);
        if (result != null && result.next())
        {
                pupilNumber = result.getString("PUPIL_NUMBER");
                firstName = result.getString("PUPIL_FIRST_NAME");
                lastName = result.getString("PUPIL_LAST_NAME");
                address1 =  result.getString("ADDRESS_1");
                address2 = result.getString("ADDRESS_2");
                post = result.getString("POSTCODE");
                telephone = result.getString("TELEPHONE_NUMBER");
                birth = result.getString("DATE_OF_BIRTH");
                SimpleDateFormat inFmt = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat outFmt = new SimpleDateFormat ("dd/MM/yyyy");
                try{
                    birth = outFmt.format(inFmt.parse(birth.toString()));
                }
                catch(ParseException e){
                    lblMessage.setText(e.getMessage());
                }
                found = true;
        }
        else
        {
            found = false;
            lblMessage.setText("Record not found");
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
        }
        if (found == true)
        {
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
             model.addRow(new Object [] {pupilNumber,firstName,lastName,address1,address2,post,telephone,birth});
             lblMessage.setText("");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch (Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD PUPILDIARY
public void allData(){
    //this shows all the data
    String pupilNumber = "";
    String firstName = "";
    String lastName = "";
    String address1 = "";
    String address2 = "";
    String post = "";
    String telephone = "";
    String birth = "";
    try{
        //connect to database
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        //enable SQL statemets
        Statement stmt = conn.createStatement();
        String query = "SELECT PUPIL_NUMBER,PUPIL_FIRST_NAME,PUPIL_LAST_NAME" +
                ",ADDRESS_1,ADDRESS_2,POSTCODE,TELEPHONE_NUMBER,DATE_OF_BIRTH" +
                " FROM PUPILS ORDER BY PUPIL_NUMBER";
        ResultSet result = stmt.executeQuery(query);
        DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
        while (model.getRowCount()>0)
        {
            model.removeRow(0);
        }
        if (result != null)
        {
            //loop through all the records retrived
            while (result.next())
            {
                pupilNumber = result.getString("PUPIL_NUMBER");
                firstName = result.getString("PUPIL_FIRST_NAME");
                lastName = result.getString("PUPIL_LAST_NAME");
                address1 =  result.getString("ADDRESS_1");
                address2 = result.getString("ADDRESS_2");
                post = result.getString("POSTCODE");
                telephone = result.getString("TELEPHONE_NUMBER");
                birth = result.getString("DATE_OF_BIRTH");
                SimpleDateFormat inFmt = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat outFmt = new SimpleDateFormat ("dd/MM/yyyy");
                try{
                    birth = outFmt.format(inFmt.parse(birth.toString()));
                }
                catch(ParseException e){
                        System.err.print("ParseException: ");
                        System.err.println(e.getMessage());
                }
                model.addRow(new Object [] {pupilNumber,firstName,lastName,address1,address2,post,telephone,birth});
            }
        }//end if
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.println("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD ALLDATA
public void firstPupil (){
    //This method searches for a pupil by thier first name
    //Set up variables
    String GUIFirst =  txtGUIFirst.getText();
    String pupilNumber = "";
    String firstName = "";
    String lastName = "";
    String address1 = "";
    String address2 = "";
    String post = "";
    String telephone = "";
    String birth = "";
    boolean found = false;
    try{
        //connect to database
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        //enable SQL statemets
        Statement stmt = conn.createStatement();
        String query = "SELECT PUPIL_NUMBER,PUPIL_FIRST_NAME,PUPIL_LAST_NAME" +
                ",ADDRESS_1,ADDRESS_2,POSTCODE,TELEPHONE_NUMBER,DATE_OF_BIRTH" +
                " FROM PUPILS WHERE PUPIL_FIRST_NAME = '"+GUIFirst+"'";
        ResultSet result = stmt.executeQuery(query);
        if (result != null && result.next())
        {
                pupilNumber = result.getString("PUPIL_NUMBER");
                firstName = result.getString("PUPIL_FIRST_NAME");
                lastName = result.getString("PUPIL_LAST_NAME");
                address1 =  result.getString("ADDRESS_1");
                address2 = result.getString("ADDRESS_2");
                post = result.getString("POSTCODE");
                telephone = result.getString("TELEPHONE_NUMBER");
                birth = result.getString("DATE_OF_BIRTH");
                SimpleDateFormat inFmt = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat outFmt = new SimpleDateFormat ("dd/MM/yyyy");
                try{
                    birth = outFmt.format(inFmt.parse(birth.toString()));
                }
                catch(ParseException e){
                        System.err.print("ParseException: ");
                        System.err.println(e.getMessage());
                }
                found = true;
        }
        else
        {
            found = false;
            lblMessage.setText("Record not found");
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
        }
        if (found == true)
        {
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
             model.addRow(new Object [] {pupilNumber,firstName,lastName,address1,address2,post,telephone,birth});
             lblMessage.setText("");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch (Exception ex){
        System.err.println("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD FIRSTPUPIL
public void NumFirst(){
    //This searches for a pupil using the pupil number and their first name
    //set up variables
    String GUIPupilNumber = txtGUIPupilNumber.getText();
    String GUIFirst = txtGUIFirst.getText();
    String pupilNumber = "";
    String firstName = "";
    String lastName = "";
    String address1 = "";
    String address2 = "";
    String post = "";
    String telephone = "";
    String birth = "";
    boolean found = false;
    try{
        //connect to database
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        //enable SQL statemets
        Statement stmt = conn.createStatement();
        String query = "SELECT PUPIL_NUMBER,PUPIL_FIRST_NAME,PUPIL_LAST_NAME" +
                ",ADDRESS_1,ADDRESS_2,POSTCODE,TELEPHONE_NUMBER,DATE_OF_BIRTH" +
                " FROM PUPILS WHERE PUPIL_NUMBER = '"+GUIPupilNumber+"'AND" +
                " PUPIL_FIRST_NAME = '"+GUIFirst+"'";
        ResultSet result = stmt.executeQuery(query);
        if (result != null && result.next())
        {
                pupilNumber = result.getString("PUPIL_NUMBER");
                firstName = result.getString("PUPIL_FIRST_NAME");
                lastName = result.getString("PUPIL_LAST_NAME");
                address1 =  result.getString("ADDRESS_1");
                address2 = result.getString("ADDRESS_2");
                post = result.getString("POSTCODE");
                telephone = result.getString("TELEPHONE_NUMBER");
                birth = result.getString("DATE_OF_BIRTH");
                SimpleDateFormat inFmt = new SimpleDateFormat ("yyyy-MM-dd");
                SimpleDateFormat outFmt = new SimpleDateFormat ("dd/MM/yyyy");
                try{
                    birth = outFmt.format(inFmt.parse(birth.toString()));
                }
                catch(ParseException e){
                        System.err.print("ParseException: ");
                        System.err.println(e.getMessage());
                }
                found = true;
        }
        else
        {
            found = false;
            lblMessage.setText("Record not found");
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
        }
        if (found == true)
        {
            DefaultTableModel model = (DefaultTableModel)tblPupilDiary.getModel();
            //clear any data that is in the table
             while (model.getRowCount()>0)
             {
                 model.removeRow(0);
             }
             model.addRow(new Object [] {pupilNumber,firstName,lastName,address1,address2,post,telephone,birth});
             lblMessage.setText("");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch (Exception ex){
        System.err.println("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD NUMFIRST
public boolean valFirst(){
    /**this method validates what the user has entered into the first name
     *feild before it is sent to be searched
     */
    boolean state = true;
    String patt = "^[A-Za-z]*$";//only letters
    Pattern regPat = Pattern.compile(patt);
    String first = txtGUIFirst.getText();
    Matcher matcher = regPat.matcher(first);
    if (matcher.find())
    {
        state = true;
    }
    else
    {
        state = false;
    }
    return state;
}//END METHOD
public void editTable(){
    //this edits a record in the table
    int row = tblPupilDiary.getSelectedRow();
    try{
        if (row == -1)
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            String pupilNum = (String)tblPupilDiary.getValueAt(row,0);
            String first = (String)tblPupilDiary.getValueAt(row,1);
            String last = (String)tblPupilDiary.getValueAt(row,2);
            String address1 = (String)tblPupilDiary.getValueAt(row,3);
            String address2 = (String)tblPupilDiary.getValueAt(row,4);
            String post = (String)tblPupilDiary.getValueAt(row,5);
            String telephone = (String)tblPupilDiary.getValueAt(row,6);
            String birth = (String)tblPupilDiary.getValueAt(row,7);
            SimpleDateFormat inFmt = new SimpleDateFormat ("dd/MM/yyyy");
            SimpleDateFormat outFmt = new SimpleDateFormat ("yyyy-MM-dd");
            try{
                birth = outFmt.format(inFmt.parse(birth.toString()));
            }
            catch(ParseException r){
                System.err.print("ParseException: ");
                System.err.println(r.getMessage());
            }//END CATCH
    try{
        //connect to database
        post.toUpperCase();//chnage post code to upper case
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        stmt.executeUpdate("UPDATE PUPILS SET PUPIL_NUMBER='"+pupilNum+"',PUPIL_FIRST_NAME='"+first+"',PUPIL_LAST_NAME='"+last+"',ADDRESS_1='"+address1+"',ADDRESS_2='"+address2+"',POSTCODE='"+post.toUpperCase()+"',TELEPHONE_NUMBER='"+telephone+"',DATE_OF_BIRTH={d'"+birth+"'}WHERE PUPIL_NUMBER='"+pupilNum+"'");
        ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS where PUPIL_NUMBER='"+pupilNum+"'");//check that the record has been updated
        if (result.next())
        {
            allData();//update the table on the user interface
        }
        else
        {
            lblMessage.setText("Not changed");
        }
        stmt.close();
        conn.close();
        result.close();
    }//END TRY
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
            }//END CATCH
        }//END ELSE
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
    
}//END METHOD
public void getNumber(){
    //display the number of pupils in the database on the user interface
    int num = 0;
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS");
        if (result != null)
        {
            while (result.next())
            {
                num++;
            }
            lblWel2.setText("There are "+num+" pupils in the database.");
        }
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
public void getValues(){
    /**
     * get the selected pupil number from the table
     * and open a pupil profile window showing all the informatioj about
     * this pupil
     */
int row = tblPupilDiary.getSelectedRow();
try{
    if (row == -1)
    {
        throw new Exception ("Row not selected");
    }
    else
    {
        String pupilNum = (String)tblPupilDiary.getValueAt(row, 0);
        new Profile(pupilNum).setVisible(true);//opens a pupil profile window
        this.dispose();
    }
 }//end try
catch(Exception e){
    lblMessage.setText(e.getMessage());
    }//end catch
}//end method
public void delete(){
    //this deletes a record
    try{
            int row = tblPupilDiary.getSelectedRow();
            if (row == -1)
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                String pupilNum = (String)tblPupilDiary.getValueAt(row, 0);
                try{
                    DatabaseConnect.init();
                    Connection conn = DatabaseConnect.getConnection();
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate("DELETE FROM PUPILS where PUPIL_NUMBER='"+pupilNum+"'");
                    ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS where PUPIL_NUMBER='"+pupilNum+"'");
                    if (result.next())
                    {
                        lblMessage.setText("The record has not been deleted");
                    }
                    else
                    {
                        lblMessage.setText("The record has been deleted");
                         allData();
                    }
                    stmt.close();
                    conn.close();
                    result.close();
                }//end try
                catch(Exception ex){
                    System.err.print("SQLException: ");
                    System.err.println(ex.getMessage());
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
}
    /**
    * @param args the command line arguments
    */
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pupilDiary().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnProfile;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirst;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblMessage2;
    private javax.swing.JLabel lblPupilNumber;
    private javax.swing.JLabel lblWel2;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JTable tblPupilDiary;
    private javax.swing.JTextField txtGUIFirst;
    private javax.swing.JTextField txtGUIPupilNumber;
    // End of variables declaration//GEN-END:variables

}
