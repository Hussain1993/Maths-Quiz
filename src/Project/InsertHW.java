/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InsertHW.java
 *
 * Created on 18-Jan-2011, 14:00:59
 */

package Project;
import java.awt.Color;
import java.util.regex.*;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kk
 */
public class InsertHW extends javax.swing.JFrame {

    /** Creates new form InsertHW */
    public InsertHW() {
        initComponents();
        displayAll();//display all records in the database
        clearStart();// clear all error labels
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWel = new javax.swing.JLabel();
        lblHW = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        txtHW = new javax.swing.JTextField();
        txtScore = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        lblHWMsg = new javax.swing.JLabel();
        lblScoreMsg = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHW = new javax.swing.JTable();
        btnProceed = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnMain = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Insert Homework");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Homework", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblWel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWel.setText("Enter the following details about the Homework the Pupils are doing:");

        lblHW.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblHW.setText("Homework Title:");

        lblScore.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScore.setText("Score: ");

        lblDesc.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblDesc.setText("Description:");

        txtHW.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHWFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHWFocusLost(evt);
            }
        });

        txtScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtScoreFocusLost(evt);
            }
        });

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        jScrollPane1.setViewportView(txtDesc);

        lblHWMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblHWMsg.setText("jLabel5");

        lblScoreMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScoreMsg.setText("jLabel6");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDesc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(btnAdd))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblScore)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtScore))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblHW)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHW, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScoreMsg)
                            .addComponent(lblHWMsg))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDesc, lblHW, lblScore});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, txtHW, txtScore});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHW)
                    .addComponent(txtHW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHWMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScore)
                    .addComponent(txtScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScoreMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDesc)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAdd)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblSearch.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblSearch.setText("Search:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAll.setText("Show All Data");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        tblHW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Homework Tiitle", "Max Score", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblHW);

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnMain.setText("Main Menu");
        btnMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("jLabel1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAll))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnProceed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMain))
                    .addComponent(lblMessage)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAll, btnSearch});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDelete, btnEdit, btnMain, btnProceed});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProceed)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnMain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHWFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHWFocusGained
        lblHWMsg.setText("Only letters and numbers");
}//GEN-LAST:event_txtHWFocusGained

    private void txtHWFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHWFocusLost
        try{
             if (txtHW.getText().isEmpty())
             {
                 throw new Exception ("Enter Homework title");
             }
             else
             {
                 String patt = "^[A-Za-z0-9\\s]+$";
                 Pattern regPat = Pattern.compile(patt);
                 Matcher matcher = regPat.matcher(txtHW.getText());
                 if (matcher.find())
                 {
                     lblHWMsg.setForeground(Color.BLACK);
                     lblHWMsg.setText("");
                 }
                 else
                 {
                     throw new Exception ("Error");
                 }
             }//end else
        }//end try
        catch(Exception e){
            lblHWMsg.setForeground(Color.RED);
            lblHWMsg.setText(e.getMessage());
        }
}//GEN-LAST:event_txtHWFocusLost

    private void txtScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtScoreFocusLost
        try{
            if (txtScore.getText().isEmpty())
            {
                throw new Exception ("Enter score");
            }
            else
            {
                String patt = "^[0-9]+$";
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtScore.getText());
                if (matcher.find())
                {
                    lblScoreMsg.setForeground(Color.BLACK);
                    lblScoreMsg.setText("");
                }
                else
                {
                    throw new Exception ("Only numbers");
                }
            }//end else
        }//end try
        catch(Exception e){
            lblScoreMsg.setForeground(Color.RED);
            lblScoreMsg.setText(e.getMessage());
        }
}//GEN-LAST:event_txtScoreFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try{
            if (blankForm() == false)//check for a blank form
            {
                throw new Exception ("Form blank");
            }
            else
            {
                if (valScore() == false || valTitle() == false)
                {
                    throw new Exception ("Error");//check that all the feild follow the validation rules
                }
                else
                {
                    checkDatabase();//check if the record already exsists
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setForeground(Color.RED);
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        displayAll();//display all records
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainActionPerformed
        // This displays the main menu
        new MainMenu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMainActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        edit();//edit a record
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblHW.getSelectedRow();
        try{
            if (row == -1)//check if a row has been selected
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                /**
                 * display a dialog box asking the user if they are sure they
                 * want to delete a record
                 */
                int n = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete "+tblHW.getValueAt(row, 0)+" from the databse","Delete Homework",JOptionPane.YES_NO_OPTION);
                switch (n)
                {
                    case 0 : delete(); break;//if "Yes" is pressed this is called
                    case 1 : break;//if "No" is pressed the dialog box closes
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        getValues();
    }//GEN-LAST:event_btnProceedActionPerformed
public void addHW(){
    //Add a homework record
    String hwTitle = txtHW.getText();
    int score = 0;
    String desc = txtDesc.getText();
    try{
        score = Integer.parseInt(txtScore.getText());
        lblMessage.setText("");
    }//END TRY TO PARSE NUMBER
    catch(NumberFormatException e){
        lblMessage.setText(e.getMessage());
    }//END CATCH TO PARSE NUMBER
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        String query = "INSERT INTO HOMEWORK(HOMEWORK_TITLE,MAX_SCORE,DESCRIPTION)VALUES ('"+hwTitle+"',"+score+",'"+desc+"')";
        stmt.execute(query);//add the record
        ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"'");//check that the record has been added
        if (result.next())
        {
            lblMessage.setText("Added");
            displayAll();//display all the records
            clear();//clear all text feilds
        }
        else
        {
            lblMessage.setText("Not added");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD
public void displayAll(){
    /**
     * this displays all the records in the database
     * and it called at the start of the form
     */
    String hwTitle = "";
    int score = 0;
    String desc = "";
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK");
        DefaultTableModel model = (DefaultTableModel)tblHW.getModel();
        if (result != null)
        {
            while (model.getRowCount()>0)
            {
                model.removeRow(0);
            }
            while (result.next())
            {
                hwTitle = result.getString("HOMEWORK_TITLE");
                score = result.getInt("MAX_SCORE");
                desc = result.getString("DESCRIPTION");
                model.addRow(new Object[]{hwTitle,score,desc});
                //adds every record to the table
            }
        }//end if
        else
        {
            while (model.getRowCount()>0)
            {
                model.removeRow(0);
            }
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("No records found");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD
public void search(){
    //this search's for a record by homework title
    String search = txtSearch.getText();
    String hwTitle = "";
    int score = 0;
    String desc = "";
    boolean found = false;
    try{
        if (search.isEmpty())
        {
            throw new Exception ("Search feild is empty");
        }
        else
        {
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK WHERE HOMEWORK_TITLE='" + search + "'");
                DefaultTableModel model = (DefaultTableModel) tblHW.getModel();
                if (result != null && result.next())
                {
                    hwTitle = result.getString("HOMEWORK_TITLE");
                    score = result.getInt("MAX_SCORE");
                    desc = result.getString("DESCRIPTION");
                    found = true;
                }
                else
                {
                    while (model.getRowCount() > 0)
                    {
                        model.removeRow(0);
                    }
                    lblMessage.setText("No records have been found");
                }//end else
                if (found == true)
                {
                    while (model.getRowCount() > 0)
                    {
                        model.removeRow(0);
                    }
                    model.addRow(new Object[]{hwTitle, score, desc});
                }
                txtSearch.setText("");
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch (Exception ex) {
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }//end catch
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
}//END METHOD
public void edit(){
    //edit a record
    int row = tblHW.getSelectedRow();
    try{
        if (row == -1)//check that a row has been selected
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            //get values from table to be editied
            String hwTitle =  (String)tblHW.getValueAt(row, 0);
            int score = (Integer)tblHW.getValueAt(row, 1);
            String desc = (String)tblHW.getValueAt(row, 2);
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("UPDATE HOMEWORK SET HOMEWORK_TITLE='"+hwTitle+"',MAX_SCORE="+score+",DESCRIPTION='"+desc+"' where HOMEWORK_TITLE='"+hwTitle+"'");//edit the record
                ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"'");//check that the record has been updated
                if (result.next())
                {
                    displayAll();//display all records
                    lblMessage.setForeground(Color.RED);
                    lblMessage.setText("Details changed");
                }
                else
                {
                    lblMessage.setForeground(Color.BLACK);
                    lblMessage.setText("Details not changed");
                }
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch(Exception ex){
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }//end catch
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setForeground(Color.RED);
        lblMessage.setText(e.getMessage());
    }//end catch
}//END METHOD
public void delete(){
    //this deletes a record
    int row = tblHW.getSelectedRow();
    try{
        if (row == -1)
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            String hwTitle = (String)tblHW.getValueAt(row, 0);
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("DELETE FROM HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"'");
                ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"'");
                if (result.next())
                {
                    lblMessage.setForeground(Color.BLACK);
                    lblMessage.setText("Record not deleted");
                }//end if
                else
                {
                    lblMessage.setForeground(Color.RED);
                    lblMessage.setText("Record deleted");
                    displayAll();
                }
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch(Exception ex){
                   System.err.print("SQLException: ");
                   System.err.println(ex.getMessage());
            }//end catch
        }//end else
    }
    catch(Exception e){
        lblMessage.setForeground(Color.RED);
        lblMessage.setText(e.getMessage());
    }
}//END METHOD
public void getValues(){
    /**
     * This procedure gets the title and the score of the selected homework
     * and passes these values to another from so that the user can can add
     * pupil who has done this peice of homework
     */
    int row = tblHW.getSelectedRow();
    try{
          if (row == -1)
          {
              throw new Exception ("Row not selected");
          }
          else
          {
              //Get values from the table
              String title = (String)tblHW.getValueAt(row, 0);
              int max = (Integer)tblHW.getValueAt(row, 1);
              //Pass these values to another form
              new InsertHWScore(title,max).setVisible(true);
              this.dispose();
          }
    }//end try
    catch(Exception e){
        lblMessage.setForeground(Color.RED);
        lblMessage.setText(e.getMessage());
    }//end catch
}//END METHOD
public void clearStart(){
    //clear the form at the start
    lblHWMsg.setText("");
    lblScoreMsg.setText("");
    txtHW.setText("");
    txtScore.setText("");
    txtDesc.setText("");
    lblMessage.setText("");
}//end method
public void clear(){
    //clears everything on the form when a record has been added
    lblHWMsg.setText("");
    lblScoreMsg.setText("");
    txtHW.setText("");
    txtScore.setText("");
    txtDesc.setText("");
}//end method
public boolean valScore(){
    //validates the score - only a number
    boolean state = true;
    String patt = "^[0-9]+$";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtScore.getText());
    if (matcher.find())
    {
        state = true;
        lblScoreMsg.setForeground(Color.BLACK);
        lblScoreMsg.setText("");
    }
    else
    {
        state = false;
        lblScoreMsg.setForeground(Color.RED);
        lblScoreMsg.setText("Error with score");
    }
    return state;
}//end method
public boolean valTitle(){
    //validates the title - to only allow letters and numbers and dashes
    boolean state = true;
    String patt = "^[A-Za-z0-9\\s]+$";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtHW.getText());
    if (matcher.find())
    {
        lblMessage.setForeground(Color.BLACK);
        lblHWMsg.setText("");
    }
    else
    {
        lblMessage.setForeground(Color.RED);
        lblHWMsg.setText("Error on title");
        state = false;
    }
    return state;
}//end method
public boolean blankForm(){
    //checks for a blank form
    boolean state = true;
    if (txtHW.getText().isEmpty())
    {
        state = false;
        lblHWMsg.setForeground(Color.RED);
        lblHWMsg.setText("Enter Homework title");
    }
    else
    {
        valTitle();
    }
    if (txtScore.getText().isEmpty())
    {
        lblScoreMsg.setForeground(Color.RED);
        state = false;
        lblScoreMsg.setText("Enter score");
    }
    else
    {
        valScore();
    }
    return state;
}//end method
public void checkDatabase(){
    //this checks if the record already exsits
    String title = txtHW.getText();
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT * FROM HOMEWORK WHERE HOMEWORK_TITLE='"+title+"'");
        if (result.next())
        {
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("The record already exists");
        }
        else
        {
            addHW();//add a record
        }
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD
    /**
    * @param args the command line arguments
    */
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertHW().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMain;
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblHW;
    private javax.swing.JLabel lblHWMsg;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreMsg;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblWel;
    private javax.swing.JTable tblHW;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextField txtHW;
    private javax.swing.JTextField txtScore;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
