/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddingDetails.java
 *
 * Created on 06-Dec-2010, 11:06:27
 */

package Project;
import java.sql.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author aa08545
 */
public class AddingDetails extends javax.swing.JFrame {

    /** Creates new form AddingDetails */
    public AddingDetails() {
        initComponents();
        clearAll();//clear all the feilds on the form when the  form is opened
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Welcome1 = new javax.swing.JLabel();
        Welcome2 = new javax.swing.JLabel();
        lblPupilNum = new javax.swing.JLabel();
        txtPupilNum = new javax.swing.JTextField();
        lblFirst = new javax.swing.JLabel();
        txtPupilFirst = new javax.swing.JTextField();
        lblLast = new javax.swing.JLabel();
        txtPupilLast = new javax.swing.JTextField();
        lblAddress1 = new javax.swing.JLabel();
        txtAddress1 = new javax.swing.JTextField();
        lblAddress2 = new javax.swing.JLabel();
        txtAddress2 = new javax.swing.JTextField();
        lblPostcode = new javax.swing.JLabel();
        txtPostcode = new javax.swing.JTextField();
        lblTelephone = new javax.swing.JLabel();
        txtTelephone = new javax.swing.JTextField();
        lblParent = new javax.swing.JLabel();
        txtParent = new javax.swing.JTextField();
        lblDOB = new javax.swing.JLabel();
        lblMedical = new javax.swing.JLabel();
        txtMedical = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        txtDateSchool = new javax.swing.JTextField();
        lblPrevious = new javax.swing.JLabel();
        txtPrevious = new javax.swing.JTextField();
        lblLearning = new javax.swing.JLabel();
        txtLearning = new javax.swing.JTextField();
        lblDiet = new javax.swing.JLabel();
        txtDietary = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        cboGender = new javax.swing.JComboBox();
        lblEthnic = new javax.swing.JLabel();
        txtEthnic = new javax.swing.JTextField();
        lblSkill = new javax.swing.JLabel();
        lblNotes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextPane();
        lblNumErr = new javax.swing.JLabel();
        lblFirstErr = new javax.swing.JLabel();
        lblLastErr = new javax.swing.JLabel();
        lblAddress1Err = new javax.swing.JLabel();
        lblAddress2Err = new javax.swing.JLabel();
        lblPostErr = new javax.swing.JLabel();
        lblTeleErr = new javax.swing.JLabel();
        lblParentErr = new javax.swing.JLabel();
        lblDateErr = new javax.swing.JLabel();
        lblEthnicErr = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        btnAddPupil = new javax.swing.JButton();
        lblDateSchoolErr = new javax.swing.JLabel();
        lblPreviousErr = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        lblMedicalErr = new javax.swing.JLabel();
        lblLearningErr = new javax.swing.JLabel();
        lblDietErr = new javax.swing.JLabel();
        cboSkill = new javax.swing.JComboBox();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adding class details");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Adding Details ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        Welcome1.setFont(new java.awt.Font("Tahoma", 0, 14));
        Welcome1.setText("Well done you have now successfully been added to the system, you can now add ");

        Welcome2.setFont(new java.awt.Font("Tahoma", 0, 14));
        Welcome2.setText("the details of your class:");

        lblPupilNum.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblPupilNum.setText("Pupil Number: ");

        txtPupilNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPupilNumFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPupilNumFocusLost(evt);
            }
        });

        lblFirst.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblFirst.setText("Pupil First Name:");

        txtPupilFirst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPupilFirstFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPupilFirstFocusLost(evt);
            }
        });

        lblLast.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblLast.setText("Pupil Last Name:");

        txtPupilLast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPupilLastFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPupilLastFocusLost(evt);
            }
        });

        lblAddress1.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblAddress1.setText("Address Line 1:");

        txtAddress1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddress1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddress1FocusLost(evt);
            }
        });

        lblAddress2.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblAddress2.setText("Address Line 2:");

        txtAddress2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtAddress2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAddress2FocusLost(evt);
            }
        });

        lblPostcode.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblPostcode.setText("Postcode:");

        txtPostcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPostcodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPostcodeFocusLost(evt);
            }
        });

        lblTelephone.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblTelephone.setText("Telephone:");

        txtTelephone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTelephoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelephoneFocusLost(evt);
            }
        });

        lblParent.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblParent.setText("Parent Name:");

        txtParent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtParentFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtParentFocusLost(evt);
            }
        });

        lblDOB.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblDOB.setText("Date of Birth:");

        lblMedical.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblMedical.setText("Medical Conditions:");

        txtMedical.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMedicalFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMedicalFocusLost(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblDate.setText("Date Started School:");

        txtDOB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDOBFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDOBFocusLost(evt);
            }
        });

        txtDateSchool.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDateSchoolFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDateSchoolFocusLost(evt);
            }
        });

        lblPrevious.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblPrevious.setText("Previous School:");

        txtPrevious.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPreviousFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPreviousFocusLost(evt);
            }
        });

        lblLearning.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblLearning.setText("Learning Difficulties:");

        txtLearning.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLearningFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLearningFocusLost(evt);
            }
        });

        lblDiet.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblDiet.setText("Dietary Needs:");

        txtDietary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDietaryFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDietaryFocusLost(evt);
            }
        });

        lblGender.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblGender.setText("Gender:");

        cboGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        lblEthnic.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblEthnic.setText("Ethnic Background:");

        txtEthnic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEthnicFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEthnicFocusLost(evt);
            }
        });

        lblSkill.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblSkill.setText("Skill Level:");

        lblNotes.setFont(new java.awt.Font("Tahoma", 0, 13));
        lblNotes.setText("Notes on Pupil:");

        jScrollPane1.setViewportView(txtNotes);

        lblNumErr.setForeground(new java.awt.Color(255, 0, 0));
        lblNumErr.setText("fefgffggffg");

        lblFirstErr.setForeground(new java.awt.Color(255, 0, 0));
        lblFirstErr.setText("ydhdhdhd");

        lblLastErr.setForeground(new java.awt.Color(255, 0, 0));
        lblLastErr.setText("hdhdhdhd");

        lblAddress1Err.setForeground(new java.awt.Color(255, 0, 0));
        lblAddress1Err.setText("jjjjjjjjjjjjjjjjjjjjjjjjjjjkjkjkjk");

        lblAddress2Err.setForeground(new java.awt.Color(255, 0, 0));
        lblAddress2Err.setText("ghbfghfghf");

        lblPostErr.setForeground(new java.awt.Color(255, 0, 0));
        lblPostErr.setText("ghhhhhhhhh");

        lblTeleErr.setForeground(new java.awt.Color(255, 0, 0));
        lblTeleErr.setText("fdggfhhhhhfghfghf");

        lblParentErr.setForeground(new java.awt.Color(255, 0, 0));
        lblParentErr.setText("fgdfgfhfghj");

        lblDateErr.setForeground(new java.awt.Color(255, 0, 0));
        lblDateErr.setText("ghfghfghfgh");

        lblEthnicErr.setForeground(new java.awt.Color(255, 0, 0));
        lblEthnicErr.setText("j,k,lkilujkhjk");

        lblMessage.setText("jLabel21");

        btnAddPupil.setText("Add Pupil");
        btnAddPupil.setVerifyInputWhenFocusTarget(false);
        btnAddPupil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPupilActionPerformed(evt);
            }
        });

        lblDateSchoolErr.setForeground(new java.awt.Color(255, 0, 0));
        lblDateSchoolErr.setText("hgjghjhk");

        lblPreviousErr.setText("dddddd");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblMedicalErr.setText("jLabel1");

        lblLearningErr.setText("jLabel1");

        lblDietErr.setText("jLabel1");

        cboSkill.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hard", "Easy" }));

        btnReset.setText("Reset to Default");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Welcome2)
                .addContainerGap(461, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Welcome1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNotes, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSkill, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEthnic, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblGender, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDiet, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLearning, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPrevious, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMedical, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDOB, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblParent, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTelephone, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPostcode, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAddress2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAddress1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLast, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblFirst, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPupilNum, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDietary, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtLearning, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtPrevious, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtDateSchool, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtMedical, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtDOB, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtParent, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtTelephone, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtPostcode, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtAddress2, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtAddress1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtPupilLast, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtPupilFirst, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtPupilNum, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(cboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEthnic, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDateSchoolErr, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblEthnicErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblParentErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblTeleErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblPostErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblAddress2Err, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblAddress1Err, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblLastErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblFirstErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblDateErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                                    .addComponent(lblMedicalErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnExit)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnReset)))
                                .addGap(22, 22, 22)
                                .addComponent(btnAddPupil))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblDietErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblLearningErr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                            .addComponent(lblPreviousErr, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumErr, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)))
                    .addComponent(cboSkill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(lblMessage)
                .addContainerGap(443, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAddress1, txtAddress2, txtDOB, txtDateSchool, txtDietary, txtEthnic, txtLearning, txtMedical, txtParent, txtPostcode, txtPrevious, txtPupilFirst, txtPupilLast, txtPupilNum, txtTelephone});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddPupil, btnExit});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Welcome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Welcome2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPupilNum)
                    .addComponent(txtPupilNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirst)
                    .addComponent(txtPupilFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLast)
                    .addComponent(txtPupilLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress1)
                    .addComponent(txtAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress1Err))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress2)
                    .addComponent(txtAddress2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddress2Err))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPostcode)
                    .addComponent(txtPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPostErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelephone)
                    .addComponent(txtTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeleErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblParent)
                    .addComponent(txtParent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblParentErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDOB)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMedical)
                    .addComponent(txtMedical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMedicalErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(txtDateSchool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateSchoolErr, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrevious)
                    .addComponent(txtPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPreviousErr, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLearning)
                    .addComponent(txtLearning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLearningErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDiet)
                    .addComponent(txtDietary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDietErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(cboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEthnic)
                    .addComponent(txtEthnic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEthnicErr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSkill)
                    .addComponent(cboSkill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNotes)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(btnAddPupil)
                    .addComponent(btnReset)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPupilNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilNumFocusLost
        try{
            if (txtPupilNum.getText().length() == 0)
            {
                throw new Exception ("Enter pupil number");
            }
            else
            {
                String patt = "^[A-Z]{1}([0-9]{4})$";
                /**
                 * This regular expression only allows
                 * capital letters and number and must be in
                 * the form that there is onr letter at the start and it
                 * ends in numbers example: A1234
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPupilNum.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Capital letters and numbers only");
                }
            }
        }
        catch(Exception e){
            //print error
            lblNumErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPupilNumFocusLost

    private void txtPupilFirstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilFirstFocusLost
        try{
            if (txtPupilFirst.getText().length() == 0)
            {
                throw new Exception ("Enter first name");
            }
            else
            {
                String patt = "^[A-Za-z]+$";//only letters
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPupilFirst.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }
            }
        }
        catch(Exception e){
            //print error
             lblFirstErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPupilFirstFocusLost

    private void txtPupilLastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilLastFocusLost
        try{
            if (txtPupilLast.getText().length() == 0)
            {
                throw new Exception ("Enter last name");
            }
            else
            {
                String patt = "^[A-Za-z]+$";//only letters
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPupilLast.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }
            }
        }
        catch(Exception e){
            //print error
            lblLastErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPupilLastFocusLost

    private void txtAddress1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress1FocusLost
        try{
            if (txtAddress1.getText().length() == 0)
            {
                throw new Exception ("Enter first line of address");
            }
            else
            {
                String patt = "^[A-Za-z0-9\\s]+$";
                /**
                 * Only letters, numbers and spaces
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtAddress1.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters and number can be entered");
                }
            }
        }
        catch(Exception e){
            //print error
            lblAddress1Err.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtAddress1FocusLost

    private void txtAddress2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress2FocusLost
        try{
            if (txtAddress2.getText().length() == 0)
            {
                throw new Exception ("Enter second line of address");
            }
            else
            {
                String patt = "^[A-Za-z0-9\\s]+$";
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtAddress2.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters and number can be entered");
                }
            }
        }
        catch(Exception e){
            //print error
            lblAddress2Err.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtAddress2FocusLost

    private void txtPostcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPostcodeFocusLost
        try{
            if (txtPostcode.getText().length() == 0)
            {
                throw new Exception ("Enter postcode");
            }
            else
            {
                String patt = "^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$";
                /**
                 * This reular expression checks if the entered
                 * postcode follows the UK postcode format this does not include the space in the postcode
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPostcode.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Wrong postcode format entered");
                }
            }
        }
        catch(Exception e){
            //print error
            lblPostErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPostcodeFocusLost

    private void txtTelephoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelephoneFocusLost
        try{
            if (txtTelephone.getText().length() == 0)
            {
                throw new Exception ("Enter telephone number");
            }
            else
            {
                String patt = "^02([\\d]{3})[(\\D\\s)]?[\\d]{3}[(\\D\\s)]?[\\d]{3}$";
                /**
                 * This a reular expression for a telephone number,
                 *  the number must start with the digits "02" meaning that
                 * it will be a landline number that will be entered
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtTelephone.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Telephone number in wrong format");
                }
            }
        }
        catch(Exception e){
            //print error
            lblTeleErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtTelephoneFocusLost

    private void txtParentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtParentFocusLost
        try{
            if (txtParent.getText().length() == 0)
            {
                throw new Exception ("Enter parent name");
            }
            else
            {
                String patt = "^[A-Za-z\\s]+$"; //letters and spaces
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtParent.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }
            }
        }
        catch(Exception e){
            //print error
            lblParentErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtParentFocusLost

    private void txtDOBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDOBFocusLost
        try{
            if (txtDOB.getText().length() == 0)
            {
                throw new Exception ("Enter date of birth");
            }
            else
            {
                String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";
                /**
                 * This a regualt expression for a date where if has to
                 * follow the format DD/MM/YYYY
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtDOB.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Invalid date");
                }
            }
        }
        catch(Exception e){
            //print error
            lblDateErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtDOBFocusLost

    private void txtEthnicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEthnicFocusLost
        try{
            if (txtEthnic.getText().length() == 0)
            {
                throw new Exception ("Enter ethnic background of child");
            }
            else
            {
                String patt = "^[A-Za-z\\s-]+$";
                /**
                 * This only accepts letters and sapces and the
                 * character "-"
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtEthnic.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }
            }
        }
        catch(Exception e)
        {
            //print error
            lblEthnicErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtEthnicFocusLost

    private void btnAddPupilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPupilActionPerformed
        try{
            if (checkDetails() == false)//check for a blank form before being sent off
            {
                throw new Exception ("Blank form");
            }
            else
            {
                if (valAddress1() == false || valAddress2() == false || valDOB() == false || valDiet() == false || valEthnic() == false || valFirst() == false || valLast() == false || valLearning() == false || valMedical() == false || valParent() == false || valPostcode() == false || valPrevious() == false || valTelephone() == false)
                {
                    /**
                     * This if statement checks if all the text feilds have passed
                     * the validation tests that have been implemented for each
                     * of them and throws a error if any one of them fales
                     */
                    throw new Exception ("Error on form");
                }
                else
                {
                    checkDatabase();//check if the record already exsits in the database
                }
            }
        }
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
}//GEN-LAST:event_btnAddPupilActionPerformed

    private void txtDateSchoolFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateSchoolFocusLost
        try{
            if (txtDateSchool.getText().length()==0)
            {
                throw new Exception ("Enter date started school");
            }
            String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";//date format DD/MM/YYYY
            Pattern regPat = Pattern.compile(patt);
            String dateSchool = txtDateSchool.getText();
            Matcher matcher = regPat.matcher(dateSchool);
            if (matcher.find())
            {
                lblDateSchoolErr.setText("");
            }
            else
            {
                throw new Exception ("Error with date");
            }
        }
        catch (Exception e){
              lblDateSchoolErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtDateSchoolFocusLost

    private void txtPreviousFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPreviousFocusLost
        try{
            String patt = "^[A-Za-z0-9\\s]*$";//only letters and numbers
            Pattern regPat = Pattern.compile(patt);
            String previous = txtPrevious.getText();
            Matcher matcher = regPat.matcher(previous);
            if (matcher.find())
            {
                lblPreviousErr.setText("");
            }
            else
            {
                throw new Exception ("Only letters and numbers");
            }
        }
        catch(Exception e){
             lblPreviousErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPreviousFocusLost

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();//this closes the form
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtMedicalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedicalFocusLost
        try{
            String patt = "^[A-Za-z\\s]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            String medical = txtMedical.getText();
            Matcher matcher = regPat.matcher(medical);
            if (matcher.find())
            {
                lblMedicalErr.setText("");
            }
            else
            {
                throw new Exception ("Only letters");
            }
        }
        catch (Exception e){
              lblMedicalErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtMedicalFocusLost

    private void txtLearningFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLearningFocusLost
        try{
            String patt = "^[A-Za-z\\s]+$";//letters and spaces
            Pattern regPat = Pattern.compile(patt);
            String learning = txtLearning.getText();
            Matcher matcher = regPat.matcher(learning);
            if (matcher.find())
            {
                lblLearningErr.setText("");
            }
            else
            {
                throw new Exception ("Only letters");
            }
        }
        catch (Exception e){
            lblLearningErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtLearningFocusLost

    private void txtDietaryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDietaryFocusLost
        try{
             String patt = "^[A-Za-z\\s]*$";//only letters and spaces
             Pattern regPat = Pattern.compile(patt);
             String diet = txtDietary.getText();
             Matcher matcher = regPat.matcher(diet);
             if (matcher.find())
             {
                 lblDietErr.setText("");
             }
             else
             {
                 throw new Exception ("Only letters");
             }
        }
        catch(Exception e){
               lblDietErr.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtDietaryFocusLost

    private void txtPupilNumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilNumFocusGained
        lblNumErr.setText("Capital letters and numbers can only be entered");
    }//GEN-LAST:event_txtPupilNumFocusGained

    private void txtPupilFirstFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilFirstFocusGained
        lblFirstErr.setText("Only letters");
    }//GEN-LAST:event_txtPupilFirstFocusGained

    private void txtPupilLastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilLastFocusGained
        lblLastErr.setText("Only letters");
    }//GEN-LAST:event_txtPupilLastFocusGained

    private void txtAddress1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress1FocusGained
        lblAddress1Err.setText("Only letters and numbers");
    }//GEN-LAST:event_txtAddress1FocusGained

    private void txtAddress2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAddress2FocusGained
        lblAddress2Err.setText("Only letters and numbers");
    }//GEN-LAST:event_txtAddress2FocusGained

    private void txtPostcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPostcodeFocusGained
        lblPostErr.setText("Follow UK Postcode format");
    }//GEN-LAST:event_txtPostcodeFocusGained

    private void txtTelephoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelephoneFocusGained
        lblTeleErr.setText("Only numbers");
    }//GEN-LAST:event_txtTelephoneFocusGained

    private void txtParentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtParentFocusGained
        lblParentErr.setText("Only letters");
    }//GEN-LAST:event_txtParentFocusGained

    private void txtDOBFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDOBFocusGained
        lblDateErr.setText("Enter Date of Birth in format DD/MM/YYYY");
    }//GEN-LAST:event_txtDOBFocusGained

    private void txtMedicalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedicalFocusGained
        lblMedicalErr.setText("Only letters");
    }//GEN-LAST:event_txtMedicalFocusGained

    private void txtDateSchoolFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateSchoolFocusGained
        lblDateSchoolErr.setText("Enter in format DD/MM/YYYY");
    }//GEN-LAST:event_txtDateSchoolFocusGained

    private void txtPreviousFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPreviousFocusGained
        lblPreviousErr.setText("Only letters");
    }//GEN-LAST:event_txtPreviousFocusGained

    private void txtLearningFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLearningFocusGained
        lblLearningErr.setText("Only letters");
    }//GEN-LAST:event_txtLearningFocusGained

    private void txtDietaryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDietaryFocusGained
        lblDietErr.setText("Only letters");
    }//GEN-LAST:event_txtDietaryFocusGained

    private void txtEthnicFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEthnicFocusGained
        lblEthnicErr.setText("Only letters");
    }//GEN-LAST:event_txtEthnicFocusGained

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearAll();
    }//GEN-LAST:event_btnResetActionPerformed
    public void addPupil(){
        //this adds a pupil to the database
        String pupilNum = txtPupilNum.getText();
        String first = txtPupilFirst.getText();
        String last = txtPupilLast.getText();
        String notes = txtNotes.getText();
        String address1 = txtAddress1.getText();
        String address2 = txtAddress2.getText();
        String post = txtPostcode.getText().toUpperCase();
        String telephone = txtTelephone.getText();
        String parent = txtParent.getText();
        String birth = "";
        String medical = txtMedical.getText();
        String dateSchool = "";
        String previous = txtPrevious.getText();
        String learning = txtLearning.getText();
        String diet = txtDietary.getText();
        String ethnic = txtEthnic.getText();
        Object selectSkill = cboSkill.getSelectedItem();
        String skill = (String)selectSkill;
        Object select = cboGender.getSelectedItem();
        String gender = (String)select;
        if (notes.isEmpty())
        {
            notes = "None";
        }
        if (medical.isEmpty())
        {
            medical = "None";
        }
        if (previous.isEmpty())
        {
            previous = "None";
        }
        if (learning.isEmpty())
        {
            learning = "None";
        }
        if (diet.isEmpty())
        {
            diet = "None";
        }
        /**
         * In these if statements if it is found that the selected
         * text feilds are empty then the program will replace them
         * with the word "None" so that when these records are retrived from the
         * they are not just blank cells in a table
         */
        SimpleDateFormat inFmt = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat outFmt = new SimpleDateFormat("yyyy-MM-dd");
        try{
           birth = outFmt.format(inFmt.parse(txtDOB.getText()));
           dateSchool = outFmt.format(inFmt.parse(txtDateSchool.getText()));
        }//change date to format "yyyy-MM-dd"
        catch(ParseException e){
            System.err.print("ParseException: ");
            System.err.println(e.getMessage());
        }//END CATCH
        try{
            DatabaseConnect.init();
            Connection conn = DatabaseConnect.getConnection();
            Statement stmt = conn.createStatement();
            stmt.execute("INSERT INTO PUPILS (PUPIL_NUMBER,PUPIL_FIRST_NAME,PUPIL_LAST_NAME,NOTES_ON_PUPIL,ADDRESS_1,ADDRESS_2,POSTCODE,TELEPHONE_NUMBER,PARENT_GURDIAN_NAME,DATE_OF_BIRTH,MEDICAL_CONDITIONS,DATE_STARTED_SCHOOL,PREVIOUS_SCHOOL,LEARNING_DIFFICULTIES,DIETARY_NEEDS,ETHNIC_BACKGROUND,SKILL_LEVEL,GENDER)VALUES ('"+pupilNum+"','"+first+"','"+last+"','"+notes+"','"+address1+"','"+address2+"','"+post+"','"+telephone+"','"+parent+"',{d'"+birth+"'},'"+medical+"',{d'"+dateSchool+"'},'"+previous+"','"+learning+"','"+diet+"','"+ethnic+"','"+skill+"','"+gender+"')");
            ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS where PUPIL_NUMBER='"+pupilNum+"'");//check that the pupil has been added to the database
            if (result.next())
            {
                lblMessage.setText("Details have been added");
                int n = JOptionPane.showConfirmDialog(this, "Are there more pupils to add?","Add more pupils",JOptionPane.YES_NO_OPTION);//this displays a dialog box asking the user if there are more pupils to add to the database
                switch (n)
                {
                    case 0 : this.dispose();new AddingDetails().setVisible(true);break;//if they press "Yes" they will be presented with a new AddingDeatils form
                    case 1 : this.dispose(); new MainMenu().setVisible(true);break;//if they presss "No" they will be taken to the Main Menu
                }
            }
            else
            {
                lblMessage.setText("The details have not been added");
            }
            stmt.close();
            conn.close();
            result.close();
        }
        catch(Exception ex){
                  System.err.print("SQLException: ");
                  System.err.println(ex.getMessage());
        }//END CATCH
    }//END METHOD

    public boolean checkDetails(){
        //this checks if all the feilds that are needed to be filled are. checks for a blank from
        boolean state = true;
            if (txtPupilNum.getText().length()==0)
            {
                lblNumErr.setText("Enter Pupil Number");
                state = false;
            }
            if (txtPupilFirst.getText().length()==0)
            {
                lblFirstErr.setText("Enter First Name");
                state = false; 
            }
            if (txtPupilLast.getText().length()==0)
            {
                lblLastErr.setText("Enter Last Name");
                state = false;
            }
            if (txtAddress1.getText().length()==0)
            {
                lblAddress1Err.setText("Enter address line one");
                state = false;
            }
            if (txtAddress2.getText().length()==0)
            {
                lblAddress2Err.setText("Enter address line two");
                state = false; 
            }
            if (txtPostcode.getText().length()==0)
            {
                lblPostErr.setText("Enter Postcode");
                state = false;
            }
            if (txtTelephone.getText().length()==0)
            {
                lblTeleErr.setText("Enter Telephone number");
                state = false;
            }
            if (txtParent.getText().length()==0)
            {
                lblParentErr.setText("Enter Parent Name");
                state = false;
            }
            if (txtDOB.getText().length()==0)
            {
                lblDateErr.setText("Enter Date of Birth");
                state = false;
            }
            if (txtEthnic.getText().length()==0)
            {
                lblEthnicErr.setText("Enter Ethnic Background");
                state = false;
            }
            if (txtDateSchool.getText().length()==0)
            {
                lblDateSchoolErr.setText("Enter date started school");
                state = false;
            }
        return state;
    }//END METHOD CHECKDETAILS
    public boolean valPupilNum(){
        //validates pupil number
        boolean state = true;
        String patt = "^[A-Z]{1}([0-9]{4})$";
        Pattern regPat = Pattern.compile(patt);
        Matcher matcher =  regPat.matcher(txtPupilNum.getText());
        if (matcher.find())
        {
            lblNumErr.setText("");
        }
        else
        {
            lblNumErr.setText("Error");
        }
        return state;
    }//END METHOD
    public boolean valFirst(){
        //validates first name
        boolean state = true;
        String patt = "^[A-Za-z]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            //get text to be tested
            String first = txtPupilFirst.getText();
            Matcher matcher = regPat.matcher(first);
            if (matcher.find())
            {
                lblFirstErr.setText("");
                state = true;
            }
            else
            {
                lblFirstErr.setText("Only letters");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valLast(){
        //validates last name
        boolean state = true;
        String patt = "^[A-Za-z]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            String last = txtPupilLast.getText();
            Matcher matcher = regPat.matcher(last);
            if (matcher.find())
            {
                lblLastErr.setText("");
                state = true;
            }
            else
            {
                lblLastErr.setText("Only letters");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valAddress1(){
        //validates first line of address
        boolean state = true;
        String patt = "^[A-Za-z0-9\\s]*$";//only letters and numbers
            Pattern regPat = Pattern.compile(patt);
            String address1 = txtAddress1.getText();
            Matcher matcher = regPat.matcher(address1);
            if (matcher.find())
            {
                lblAddress1Err.setText("");
                state = true;
            }
            else
            {
                lblAddress1Err.setText("Only letters and numbers");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valAddress2(){
        //validates the second line of address
        boolean state = true;
        String patt = "^[A-Za-z0-9\\s]*$";//only letters and numbers
            Pattern regPat = Pattern.compile(patt);
            String address2 =  txtAddress2.getText();
            Matcher matcher = regPat.matcher(address2);
            if (matcher.find())
            {
                lblAddress2Err.setText("");
                state = true;
            }
            else
            {
                lblAddress2Err.setText("Only letters and numbers");
                state = false;
            }
        return state;
    }
    public boolean valPostcode(){
        //validates the postcode
        boolean state = true;
        String patt = "^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$";//format for standard UK postcode
            Pattern regPat = Pattern.compile(patt);
            String postcode = txtPostcode.getText();
            Matcher matcher = regPat.matcher(postcode);
            if (matcher.find())
            {
                //if no error clear
                lblPostErr.setText("");
                state = true;
            }
            else
            {
                lblPostErr.setText("Wrong postcode format");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valTelephone (){
        //validates the telephone
        boolean state = true;
        String patt = "^02([\\d]{3})[(\\D\\s)]?[\\d]{3}[(\\D\\s)]?[\\d]{3}$";//standard reg expression for phone numbers
            Pattern regPat = Pattern.compile(patt);
            String telephone = txtTelephone.getText();
            Matcher matcher = regPat.matcher(telephone);
            if (matcher.find())
            {
                lblTeleErr.setText("");
                state = true;
            }
            else
            {
                lblTeleErr.setText("Wrong phone format");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valParent (){
        //validates the parent feild
        boolean state = true;
        String patt = "^[A-Za-z\\s]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            String parent = txtParent.getText();
            Matcher matcher = regPat.matcher(parent);
            if (matcher.find())
            {
                lblParentErr.setText("");
            }
            else
            {
                lblParentErr.setText("Only letters");
            }
        return state;
    }//END METHOD
    public boolean valDOB(){
        //validates DOB
        boolean state = true;
        String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";// regular expression for date
        Pattern regPat = Pattern.compile(patt);
        String DOB = txtDOB.getText();
        Matcher matcher = regPat.matcher(DOB);
        if (matcher.find())
            {
                lblDateErr.setText("");
                state = true;
            }
            else
            {
                lblDateErr.setText("Error on date");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valMedical(){
        //validates the medical information
        boolean state = true;
        String patt = "^[A-Za-z\\s]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            String medical = txtMedical.getText();
            Matcher matcher = regPat.matcher(medical);
            if (matcher.find())
            {
                lblMedicalErr.setText("");
                state = true;
            }
            else
            {
                lblMedicalErr.setText("Only letters");
                state = false;
            }
        return state;
    }
    public boolean dateSchool(){
        //validates the date started school
        boolean state = true;
        String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";//date format DD/MM/YYYY
            Pattern regPat = Pattern.compile(patt);
            String dateSchool = txtDateSchool.getText();
            Matcher matcher = regPat.matcher(dateSchool);
            if (matcher.find())
            {
                lblDateSchoolErr.setText("");
                state = true;
            }
            else
            {
                lblDateSchoolErr.setText("Error with date");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valPrevious(){
        //validates the previous school
        boolean state = true;
        String patt = "^[A-Za-z0-9\\s]*$";//only letters and numbers
            Pattern regPat = Pattern.compile(patt);
            String previous = txtPrevious.getText();
            Matcher matcher = regPat.matcher(previous);
            if (matcher.find())
            {
                lblPreviousErr.setText("");
                state = true;
            }
            else
            {
                lblPreviousErr.setText("Only letters and numbers");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valLearning(){
        //validates data entered in learning feild
        boolean state = true;
          String patt = "^[A-Za-z\\s]*$";
            Pattern regPat = Pattern.compile(patt);
            String learning = txtLearning.getText();
            Matcher matcher = regPat.matcher(learning);
            if (matcher.find())
            {
                lblLearningErr.setText("");
                state = true;
            }
            else
            {
                lblLearningErr.setText("Only letters");
                state = false;
            }
        return state;
    }//END METHOD
    public boolean valDiet(){
        //validates diet
        boolean state = true;
        String patt = "^[A-Za-z\\s]*$";//only letters
             Pattern regPat = Pattern.compile(patt);
             String diet = txtDietary.getText();
             Matcher matcher = regPat.matcher(diet);
             if (matcher.find())
             {
                 lblDietErr.setText("");
                 state = true;
             }
             else
             {
                 lblDietErr.setText("Only letters");
                 state = false;
             }
        return state;
    }//END METHOD
    public boolean valEthnic(){
        //validates ethnic
        boolean state = true;
        String patt = "^[A-Za-z\\s-]*$";//only letters
            Pattern regPat = Pattern.compile(patt);
            String ethnic = txtEthnic.getText();
            Matcher matcher = regPat.matcher(ethnic);
            if (matcher.find())
            {
                lblEthnicErr.setText("");
                state = true;
            }
            else
            {
                lblEthnicErr.setText("Only letters");
                state = false; 
            }
        return state;
    }//END METHOD
    public void clearAll(){
        txtPupilNum.setText("");
        txtPupilFirst.setText("");
        txtPupilLast.setText("");
        txtAddress1.setText("");
        txtAddress2.setText("");
        txtPostcode.setText("");
        txtTelephone.setText("");
        txtParent.setText("");
        txtDOB.setText("");
        txtMedical.setText("");
        txtDateSchool.setText("");
        txtPrevious.setText("");
        txtLearning.setText("");
        txtDietary.setText("");
        txtEthnic.setText("");
        txtNotes.setText("");
        lblNumErr.setText("");
        lblFirstErr.setText("");
        lblLastErr.setText("");
        lblAddress1Err.setText("");
        lblAddress2Err.setText("");
        lblPostErr.setText("");
        lblTeleErr.setText("");
        lblParentErr.setText("");
        lblDateErr.setText("");
        lblMedicalErr.setText("");
        lblDateSchoolErr.setText("");
        lblPreviousErr.setText("");
        lblLearningErr.setText("");
        lblDietErr.setText("");
        lblEthnicErr.setText("");
        lblMessage.setText("");
    }//end method
    public void checkDatabase(){
        //this checks if the recod already exsits in the database
        String pupilNum = txtPupilNum.getText();
        try{
            DatabaseConnect.init();
            Connection conn = DatabaseConnect.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM PUPILS WHERE PUPIL_NUMBER='"+pupilNum+"'");
            if (result.next())
            {
                lblMessage.setText("The record already exsists");
            }
            else
            {
                addPupil();//add the pupil if there are no records
            }
            stmt.close();
            conn.close();
            result.close();
        }
        catch(Exception ex){
            System.err.print("SQLException: ");
            System.err.println(ex.getMessage());
        }//end catch
    }//end method
    /**
    * @param args the command line arguments
    */
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddingDetails().setVisible(true);
            }
        });
    }*/
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Welcome1;
    private javax.swing.JLabel Welcome2;
    private javax.swing.JButton btnAddPupil;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox cboGender;
    private javax.swing.JComboBox cboSkill;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress1Err;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAddress2Err;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDateErr;
    private javax.swing.JLabel lblDateSchoolErr;
    private javax.swing.JLabel lblDiet;
    private javax.swing.JLabel lblDietErr;
    private javax.swing.JLabel lblEthnic;
    private javax.swing.JLabel lblEthnicErr;
    private javax.swing.JLabel lblFirst;
    private javax.swing.JLabel lblFirstErr;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLast;
    private javax.swing.JLabel lblLastErr;
    private javax.swing.JLabel lblLearning;
    private javax.swing.JLabel lblLearningErr;
    private javax.swing.JLabel lblMedical;
    private javax.swing.JLabel lblMedicalErr;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblNumErr;
    private javax.swing.JLabel lblParent;
    private javax.swing.JLabel lblParentErr;
    private javax.swing.JLabel lblPostErr;
    private javax.swing.JLabel lblPostcode;
    private javax.swing.JLabel lblPrevious;
    private javax.swing.JLabel lblPreviousErr;
    private javax.swing.JLabel lblPupilNum;
    private javax.swing.JLabel lblSkill;
    private javax.swing.JLabel lblTeleErr;
    private javax.swing.JLabel lblTelephone;
    private javax.swing.JTextField txtAddress1;
    private javax.swing.JTextField txtAddress2;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtDateSchool;
    private javax.swing.JTextField txtDietary;
    private javax.swing.JTextField txtEthnic;
    private javax.swing.JTextField txtLearning;
    private javax.swing.JTextField txtMedical;
    private javax.swing.JTextPane txtNotes;
    private javax.swing.JTextField txtParent;
    private javax.swing.JTextField txtPostcode;
    private javax.swing.JTextField txtPrevious;
    private javax.swing.JTextField txtPupilFirst;
    private javax.swing.JTextField txtPupilLast;
    private javax.swing.JTextField txtPupilNum;
    private javax.swing.JTextField txtTelephone;
    // End of variables declaration//GEN-END:variables

}
