/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InsertScoreClass.java
 *
 * Created on 15-Jan-2011, 20:26:06
 */

package Project;

import java.awt.print.PrinterException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kk
 */
public class InsertScoreClass extends javax.swing.JFrame {
    /** Creates new form InsertScoreClass */
    String Title = "";
    int maxScore = 0;
    public InsertScoreClass(String classTitle,int max,String description) {
        initComponents();
        lblWel.setText("You are now adding the details of the following class work:'"+classTitle+"'");//this tells the user which class work title they are adding a pupil fro
        txtClass.setText(classTitle);
        Title = classTitle;
        maxScore = max;
        display();//display all the records in the database.
        clear();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWel = new javax.swing.JLabel();
        lblClass = new javax.swing.JLabel();
        txtClass = new javax.swing.JTextField();
        lblPupilNum = new javax.swing.JLabel();
        txtPupilNum = new javax.swing.JTextField();
        lblFirst = new javax.swing.JLabel();
        lblLast = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        lblFeed = new javax.swing.JLabel();
        txtFirst = new javax.swing.JTextField();
        txtLast = new javax.swing.JTextField();
        txtScore = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFeed = new javax.swing.JTextArea();
        lblFirstMsg = new javax.swing.JLabel();
        lblLastMsg = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        lblScoreMsg = new javax.swing.JLabel();
        lblPupilMsg = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClass = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnAll = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Insert Class Work Score");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Class Work Score", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblWel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWel.setText("jLabel1");

        lblClass.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblClass.setText("Class Work Title:");

        txtClass.setEditable(false);

        lblPupilNum.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPupilNum.setText("Pupil Number:");

        txtPupilNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPupilNumFocusLost(evt);
            }
        });

        lblFirst.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFirst.setText("First Name:");

        lblLast.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblLast.setText("Last Name:");

        lblScore.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScore.setText("Score:");

        lblFeed.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFeed.setText("Feedback:");

        txtScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtScoreFocusLost(evt);
            }
        });

        txtFeed.setColumns(20);
        txtFeed.setRows(5);
        jScrollPane1.setViewportView(txtFeed);

        lblFirstMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFirstMsg.setText("jLabel1");

        lblLastMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblLastMsg.setText("jLabel2");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblScoreMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScoreMsg.setText("jLabel1");

        lblPupilMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPupilMsg.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblScore)
                    .addComponent(lblFeed)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblWel)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblClass)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblPupilNum)
                                        .addComponent(lblFirst))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtFirst, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(txtPupilNum, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(txtLast, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(txtScore, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lblLast))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(btnAdd))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblLastMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblFirstMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                    .addComponent(lblScoreMsg, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPupilMsg, javax.swing.GroupLayout.Alignment.LEADING))))))
                .addContainerGap(182, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, txtClass, txtFirst, txtLast, txtPupilNum, txtScore});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblClass, lblFeed, lblFirst, lblLast, lblPupilNum, lblScore});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPupilNum)
                    .addComponent(txtPupilNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPupilMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirst)
                    .addComponent(txtFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLast)
                    .addComponent(txtLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScore)
                    .addComponent(txtScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScoreMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFeed)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAdd)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Pupil Number", "First Name", "Last Name", "Class Work Title", "Score", "Max Score", "Percentage", "Feedback"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblClass);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project/resources/Trash_32.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("jLabel1");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblSearch.setText("Search:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnAll.setText("Show All Data");
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project/resources/Print_32.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAll))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMessage))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack, btnDelete, btnEdit});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAll, btnSearch});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnBack)
                    .addComponent(btnPrint)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPupilNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilNumFocusLost
        String pupilNum = txtPupilNum.getText();
        try{
            if (pupilNum.isEmpty())
            {
                throw new Exception ("Enter pupil number");
            }
            else
            {
                String patt = "^[A-Z]{1}([0-9]{4})$";
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPupilNum.getText());
                if (matcher.find())
                {
                    lblPupilMsg.setText("");
                }
                else
                {
                    throw new Exception ("Error on pupil number");
                }
                getFirstLast();
            }//end else
        }
        catch(Exception e){
            lblPupilMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPupilNumFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       try{
           if (blankForm() ==  false)
           {
               throw new Exception ("The form is blank");
           }
           else
           {
               if (valScore() == false)
               {
                   throw new Exception ("Error on form");
               }
               else
               {
                   addScore();
                   lblMessage.setText("");
               }
           }//end else
       }//end try
       catch(Exception e){
           lblMessage.setText(e.getMessage());
       }
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtScoreFocusLost
        int score = 0;
        try{
                score = Integer.parseInt(txtScore.getText());
                lblScoreMsg.setText("");
        }
        catch(NumberFormatException ex){
            lblScoreMsg.setText("Invalid Number");
        }
        try{
            if (txtScore.getText().isEmpty())
            {
                throw new Exception ("Enter score");
            }
            else
            {
                if (score > maxScore)
                {
                    throw new Exception ("Score is larger than max score; Max score is: "+maxScore+"");
                }
                else
                {
                    lblMessage.setText("");
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtScoreFocusLost

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        edit();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // This goes back to the previous form
        new InsertCW().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblClass.getSelectedRow();
        try{
            if (row == -1)
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                int n = JOptionPane.showConfirmDialog(this, "Are you sure that you want to delete "+tblClass.getValueAt(row, 1)+" from the database","Delete pupil",JOptionPane.YES_NO_OPTION);//this shows a dialog box asking the user if they want to delete a record
                switch (n)
                {
                    case 0 : delete(); break; //Pressing "Yes"
                    case 1 : break;//Pressing "No"
                }
            }//end else
        }
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        display();//display all the records in the database
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
            int n = JOptionPane.showConfirmDialog(this, "Are you sure that you want to print this table?","Print table",JOptionPane.YES_NO_OPTION);//asking the user if they want to print out a table
            switch (n)
            {
                case 0 :try {
            print();
        }//end try
                catch (PrinterException ex) {
            Logger.getLogger(InsertScoreClass.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch
             break;//pressing "Yes"
             case 1 : break;//pressing "No"
            }
    }//GEN-LAST:event_btnPrintActionPerformed
public void addScore(){
    //this adds a pupil doing a peice of classwork including the score that they have got for the classwork
    String pupilNum = txtPupilNum.getText();
    int score = 0;
    String feed = txtFeed.getText();
    try{
        score = Integer.parseInt(txtScore.getText());
    }
    catch(NumberFormatException e){
        System.err.print("ParseException: ");
        System.err.println(e.getMessage());
    }
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO PUPIL_CLASS_WORK(CLASS_WORK_TITLE,PUPIL_NUMBER,CLASS_SCORE,FEEDBACK)VALUES('"+Title+"','"+pupilNum+"',"+score+",'"+feed+"')");
        ResultSet result = stmt.executeQuery("SELECT * FROM  PUPIL_CLASS_WORK where CLASS_WORK_TITLE='"+Title+"'AND PUPIL_NUMBER='"+pupilNum+"'");
        if (result.next())
        {
            lblMessage.setText("Added");
            display();//display all the records
            clear();
        }
        else
        {
            lblMessage.setText("Not added");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD
public void display(){
    //display all the records in the database
    String pupilNum = "";
    String first = "";
    String last = "";
    double score = 0;
    String feed = "";
    String classTitle = "";
    double max = 0;
    double percent = 0;
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        String query = "SELECT PUPIL_CLASS_WORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_CLASS_WORK.CLASS_WORK_TITLE,PUPIL_CLASS_WORK.CLASS_SCORE,CLASS_WORK.MAX_SCORE,PUPIL_CLASS_WORK.FEEDBACK FROM PUPIL_CLASS_WORK,PUPILS,CLASS_WORK WHERE PUPIL_CLASS_WORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_CLASS_WORK.CLASS_WORK_TITLE=CLASS_WORK.CLASS_WORK_TITLE ORDER BY PUPIL_NUMBER";
        ResultSet result = stmt.executeQuery(query);
        DefaultTableModel model = (DefaultTableModel)tblClass.getModel();
        while(model.getRowCount()>0)
        {
            model.removeRow(0);
        }
        if (result != null)
        {
            while (result.next())
            {
                pupilNum = result.getString("PUPIL_NUMBER");
                first = result.getString("PUPIL_FIRST_NAME");
                last = result.getString("PUPIL_LAST_NAME");
                score = result.getInt("CLASS_SCORE");
                feed = result.getString("FEEDBACK");
                classTitle = result.getString("CLASS_WORK_TITLE");
                max = result.getInt("MAX_SCORE");
                percent = Math.floor((score/max)*100);//work out the percentage of the score and round down the number
                //change everything to an int
                int scoreI = (int)score;
                int maxI = (int)max;
                int percentI = (int)percent;
                model.addRow(new Object[]{pupilNum,first,last,classTitle,scoreI,maxI,percentI,feed});
            }//end while
        }//end if
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }//END CATCH
}//END METHOD
public void edit(){
    //this edits the record
    int row = tblClass.getSelectedRow();
    try{
        if (row == -1)
        {
            throw new Exception ("Row not selected");
        }//END IF
        else
        {
            String pupilNum = (String)tblClass.getValueAt(row, 0);
            String classTitle = (String)tblClass.getValueAt(row, 3);
            double score = (Integer)tblClass.getValueAt(row, 4);
            String feed = (String)tblClass.getValueAt(row, 7);
            //try-catch to connect to database
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                String query= "UPDATE PUPIL_CLASS_WORK SET CLASS_SCORE="+score+", FEEDBACK ='"+feed+"' where PUPIL_NUMBER='"+pupilNum+"'AND CLASS_WORK_TITLE='"+classTitle+"'";
                stmt.executeUpdate(query);//update the record
                ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_CLASS_WORK WHERE PUPIL_NUMBER='"+pupilNum+"'AND CLASS_WORK_TITLE='"+classTitle+"'");
                if (result.next())
                {
                    display();//update the table on the user interface
                }
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch(Exception ex){
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }
        }//END ELSE
    }//END 1ST TRY
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }//END CATCH
}//END METHOD
public void delete(){
    //delete a record
      int row = tblClass.getSelectedRow();
      try{
          if (row == -1)
          {
              throw new Exception ("Row not selected");
          }//end if
          else
          {
              String pupilNum = (String)tblClass.getValueAt(row, 0);
              String classTitle = (String)tblClass.getValueAt(row, 3);
              try{
                  DatabaseConnect.init();
                  Connection conn = DatabaseConnect.getConnection();
                  Statement stmt = conn.createStatement();
                  stmt.executeUpdate("DELETE FROM PUPIL_CLASS_WORK WHERE PUPIL_NUMBER='"+pupilNum+"'AND CLASS_WORK_TITLE='"+classTitle+"'");
                  ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_CLASS_WORK where PUPIL_NUMBER='"+pupilNum+"'AND CLASS_WORK_TITLE='"+classTitle+"'");
                  if (result.next())
                  {
                      lblMessage.setText("Record was not deleted");
                  }
                  else
                  {
                      lblMessage.setText("Record deleted");
                      display();//display all the records
                  }
                  stmt.close();
                  conn.close();
                  result.close();
              }
              catch(Exception ex){
                  System.err.print("SQLException: ");
                  System.err.println(ex.getMessage());
              }
          }//end else

      }//end try
      catch(Exception e){
          lblMessage.setText(e.getMessage());
      }//end catch
}//END METHOD
public void clear(){
    //cleat all labels and text feilds
    txtPupilNum.setText("");
    txtFirst.setText("");
    txtLast.setText("");
    txtScore.setText("");
    txtFeed.setText("");
    lblFirstMsg.setText("");
    lblLastMsg.setText("");
    lblPupilMsg.setText("");
    lblScoreMsg.setText("");
    lblMessage.setText("");
}//end method
public void search(){
    //search for a pupil by first name for classwork title
    String GUIsearch = txtSearch.getText();
    String pupilNum = "";
    String first = "";
    String last = "";
    String classTitle = "";
    double score = 0;
    String feed = "";
    double max = 0;
    double percent = 0;
    try{
        if (GUIsearch.isEmpty())
        {
            throw new Exception ("Search feild is empty");
        }
        else
        {
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery("SELECT PUPIL_CLASS_WORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_CLASS_WORK.CLASS_WORK_TITLE,PUPIL_CLASS_WORK.CLASS_SCORE,CLASS_WORK.MAX_SCORE,PUPIL_CLASS_WORK.FEEDBACK FROM PUPIL_CLASS_WORK,PUPILS,CLASS_WORK WHERE PUPIL_CLASS_WORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_CLASS_WORK.CLASS_WORK_TITLE=CLASS_WORK.CLASS_WORK_TITLE AND (PUPILS.PUPIL_FIRST_NAME='"+GUIsearch+"' OR CLASS_WORK.CLASS_WORK_TITLE='"+GUIsearch+"') ORDER BY CLASS_SCORE");
                DefaultTableModel model = (DefaultTableModel) tblClass.getModel();
                if (result != null)
                {
                    while (model.getRowCount()>0)
                    {
                        model.removeRow(0);
                    }
                    while (result.next())
                    {
                        pupilNum = result.getString("PUPIL_NUMBER");
                        first = result.getString("PUPIL_FIRST_NAME");
                        last = result.getString("PUPIL_LAST_NAME");
                        classTitle = result.getString("CLASS_WORK_TITLE");
                        score = result.getInt("CLASS_SCORE");
                        feed = result.getString("FEEDBACK");
                        max =  result.getInt("MAX_SCORE");
                        percent = Math.floor((score/max)*100);//work out percentage of score
                        //change everything to int
                        int percentI = (int)percent;
                        int scoreI = (int)score;
                        int maxI = (int)max;
                        model.addRow(new Object[]{pupilNum,first,last,classTitle,scoreI,maxI,percentI,feed});
                        lblMessage.setText("");
                    }
                }//end if
                else
                {
                    lblMessage.setText("No records found");
                }
                txtSearch.setText("");
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch (Exception ex) {
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
}
public boolean valScore(){
    //validate score
    boolean state = true;
    int score = 0;
    try{
        score = Integer.parseInt(txtScore.getText());
        lblMessage.setText("");
    }
    catch(NumberFormatException e){
        lblMessage.setText("Number error");
        state = false;
    }
    if (score > maxScore)
    {
        state = false;
        lblScoreMsg.setText("Higher than max score");
    }
    else
    {
        state = true;
    }
    return state;
}//END METHOD
public boolean blankForm(){
    //check for a blank form
    boolean state = true;
    if (txtPupilNum.getText().isEmpty())
    {
        state = false;
        lblPupilMsg.setText("Enter pupil number");
    }
    else
    {
        lblPupilMsg.setText("");
    }
    if (txtFirst.getText().isEmpty())
    {
        state = false;
        lblFirstMsg.setText("Enter first name");
    }
    else
    {
        lblFirstMsg.setText("");
    }
    if (txtLast.getText().isEmpty())
    {
        state = false;
        lblLastMsg.setText("Enter last name");
    }
    else
    {
        lblLastMsg.setText("");
    }
    if (txtScore.getText().isEmpty())
    {
        state = false;
        lblScoreMsg.setText("Enter score");
    }
    else
    {
        lblScoreMsg.setText("");
    }
    return state;
}//END METHOD
public void getFirstLast(){
    //this gets the pupils first and last name and displays them on the user interface
    //this is called when the pupil number text feild loses focus so  that the user
    //does not have to enter the first and last name of the pupil, the first and last
    //get serached in the database depending the pupil number they entered
    //and gets displayed in their respective text feilds
    String pupilNum = txtPupilNum.getText();
    String first = "";
    String last = "";
    boolean found = false;
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT PUPIL_FIRST_NAME,PUPIL_LAST_NAME FROM PUPILS WHERE PUPIL_NUMBER='"+pupilNum+"'");
        if (result != null && result.next())
        {
            found = true;
            first = result.getString("PUPIL_FIRST_NAME");
            last = result.getString("PUPIL_LAST_NAME");
        }
        else
        {
            found = false;
            lblFirstMsg.setText("Name not found");
            lblLastMsg.setText("Name not found");
            txtFirst.setText("");
            txtLast.setText("");
        }
        if (found == true)
        {
            txtFirst.setText(first);
            txtLast.setText(last);
            lblFirstMsg.setText("");
            lblLastMsg.setText("");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD

public void print() throws PrinterException{
    //this prints the table
    tblClass.print();
}//end method
    /**
    * @param args the command line arguments
    */
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertScoreClass().setVisible(true);
            }
        });
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblFeed;
    private javax.swing.JLabel lblFirst;
    private javax.swing.JLabel lblFirstMsg;
    private javax.swing.JLabel lblLast;
    private javax.swing.JLabel lblLastMsg;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPupilMsg;
    private javax.swing.JLabel lblPupilNum;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreMsg;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblWel;
    private javax.swing.JTable tblClass;
    private javax.swing.JTextField txtClass;
    private javax.swing.JTextArea txtFeed;
    private javax.swing.JTextField txtFirst;
    private javax.swing.JTextField txtLast;
    private javax.swing.JTextField txtPupilNum;
    private javax.swing.JTextField txtScore;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
