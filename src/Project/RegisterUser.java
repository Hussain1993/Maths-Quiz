/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegisterUser.java
 *
 * Created on 01-Jan-2011, 21:15:22
 */

package Project;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

/**
 *
 * @author Hussain Miah
 */
public class RegisterUser extends javax.swing.JFrame {

    /** Creates new form RegisterUser */
    public RegisterUser() {
        initComponents();
        clear();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel1 = new javax.swing.JPanel();
        lblWelcome1 = new javax.swing.JLabel();
        lblWelcome2 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblPass1 = new javax.swing.JLabel();
        lblPass2 = new javax.swing.JLabel();
        lblFirst = new javax.swing.JLabel();
        lblLast = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        txtPass1 = new javax.swing.JPasswordField();
        txtPass2 = new javax.swing.JPasswordField();
        txtFirst = new javax.swing.JTextField();
        txtLast = new javax.swing.JTextField();
        lblUserMsg = new javax.swing.JLabel();
        lblPass1Msg = new javax.swing.JLabel();
        lblPass2Msg = new javax.swing.JLabel();
        lblFirstMsg = new javax.swing.JLabel();
        lblLastMsg = new javax.swing.JLabel();
        lblPlace = new javax.swing.JLabel();
        txtPlace = new javax.swing.JTextField();
        lblBirth = new javax.swing.JLabel();
        txtBirth = new javax.swing.JTextField();
        lblPlaceMsg = new javax.swing.JLabel();
        lblDateMsg = new javax.swing.JLabel();
        Panel2 = new javax.swing.JPanel();
        lblMessage = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Registration");

        Panel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Registration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblWelcome1.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWelcome1.setText("Welcome to the Maths Quiz, To begin you will have to sign up as a user, so that you can start the quiz and use services like the");

        lblWelcome2.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWelcome2.setText("Pupil Diary. To start fill out the form below; All Fields are required. Once this is done press the Register button below.");

        lblUser.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblUser.setText("Username:");

        lblPass1.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPass1.setText("Password:");

        lblPass2.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPass2.setText("Re-enter Password:");

        lblFirst.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFirst.setText("First Name:");

        lblLast.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblLast.setText("Last Name:");

        lblError.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText("Error");

        txtUser.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUserFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserFocusLost(evt);
            }
        });

        txtPass1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPass1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPass1FocusLost(evt);
            }
        });

        txtPass2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPass2FocusLost(evt);
            }
        });

        txtFirst.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstFocusLost(evt);
            }
        });

        txtLast.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLastFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastFocusLost(evt);
            }
        });

        lblUserMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUserMsg.setText("jLabel1");

        lblPass1Msg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPass1Msg.setText("jLabel2");

        lblPass2Msg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPass2Msg.setText("jLabel3");

        lblFirstMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFirstMsg.setText("jLabel4");

        lblLastMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblLastMsg.setText("jLabel5");

        lblPlace.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPlace.setText("Place of Birth:");

        txtPlace.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPlaceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlaceFocusLost(evt);
            }
        });

        lblBirth.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblBirth.setText("Date of Birth:");

        txtBirth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBirthFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBirthFocusLost(evt);
            }
        });

        lblPlaceMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPlaceMsg.setText("jLabel3");

        lblDateMsg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDateMsg.setText("jLabel4");

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWelcome1)
                    .addComponent(lblError)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel1Layout.createSequentialGroup()
                                    .addComponent(lblFirst)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel1Layout.createSequentialGroup()
                                    .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblLast)
                                        .addComponent(lblPlace))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPlace, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                        .addComponent(txtLast)
                                        .addComponent(txtBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))))
                            .addComponent(lblBirth))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlaceMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(lblFirstMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(lblLastMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(lblDateMsg, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)))
                    .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel1Layout.createSequentialGroup()
                            .addComponent(lblPass2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPass2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblPass2Msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel1Layout.createSequentialGroup()
                            .addComponent(lblPass1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblPass1Msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel1Layout.createSequentialGroup()
                            .addComponent(lblUser)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblUserMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(lblWelcome2, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap())
        );

        Panel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblFirst, lblLast, lblPass1, lblPass2, lblUser});

        Panel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBirth, txtFirst, txtLast, txtPass1, txtPass2, txtPlace, txtUser});

        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblWelcome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWelcome2)
                .addGap(18, 18, 18)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass1)
                    .addComponent(txtPass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPass1Msg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass2)
                    .addComponent(txtPass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPass2Msg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirst)
                    .addComponent(txtFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLast)
                    .addComponent(txtLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlace)
                    .addComponent(txtPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPlaceMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBirth)
                    .addComponent(txtBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblError)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Panel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("Already signed up? Click on Log-in");

        btnLogin.setText("Log-in");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnClear.setText("Clear all fields");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel2Layout = new javax.swing.GroupLayout(Panel2);
        Panel2.setLayout(Panel2Layout);
        Panel2Layout.setHorizontalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                .addComponent(btnRegister)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear))
        );
        Panel2Layout.setVerticalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel2Layout.createSequentialGroup()
                .addGroup(Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMessage)
                    .addComponent(btnLogin)
                    .addComponent(btnClear)
                    .addComponent(btnRegister))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserFocusGained
        //Sets message when the test box has focus, so that the user knows
        //what to type in.
        lblUserMsg.setText("Only letters and numbers can be entered");
    }//GEN-LAST:event_txtUserFocusGained

    private void txtUserFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserFocusLost
     try{
         if (txtUser.getText().length() == 0)
         {
             throw new Exception ("Enter username");
         }
         else
         {
             String patt = "^[A-Za-z0-9]+$";//only letters and numbers
             Pattern regPat = Pattern.compile(patt);
             Matcher matcher = regPat.matcher(txtUser.getText());
             if (matcher.find())
             {
                 throw new Exception ("");
             }
             else
             {
                 throw new Exception ("Only letters and numbers can be entered");
             }
         }//end else
     }//end try
     catch(Exception e){
         lblUserMsg.setText(e.getMessage());
     }//end catch
    }//GEN-LAST:event_txtUserFocusLost

    private void txtPass1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPass1FocusGained
        lblPass1Msg.setText("One upper case and lower case letter and one number, minimum 6 characters");
    }//GEN-LAST:event_txtPass1FocusGained

    private void txtPass1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPass1FocusLost
        try{
        if (txtPass1.getText().length() == 0)
        {
            //presence check
            throw new Exception ("Enter password");
        }
        else
        {
            if (txtPass1.getText().equals(txtUser.getText()))
            {
                //this checks if the password is the same as the username
                //it rejects is because this is bad password setting
                //practice
                throw new Exception ("Password cannot be similar to username");
            }
            else
            {
                String patt = "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$";
                /**
                 * This regular expression check that the password
                 * follows these rules:
                 * Have one upper and lower case letter and have one number
                 * the password has to be a minimum of six characters,
                 * and be a maximum of twenty characters
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPass1.getText());
                if (matcher.find())
                {
                    //clears if the password matches the pattern
                    throw new Exception ("");
                }
                else
                {
                    //error message for when the pattern has not been followed
                    throw new Exception ("Password wrong");
                }//end else-if
            }//end else-if
        }//end else-if
    }//end try
        catch(Exception e){
            lblPass1Msg.setText(e.getMessage());
        }//end catch
    }//GEN-LAST:event_txtPass1FocusLost

    private void txtPass2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPass2FocusLost
        try{
            if (!txtPass2.getText().equals(txtPass1.getText()))
            {
                /**
                 * This checks if the password they have entered
                 * matches so that the user is sure about what their password
                 * and to check if they have not made any typos
                 */
                throw new Exception ("Passwords don't match");
            }//end if
            else if (txtPass2.getText().length() == 0)
            {
                //presence check
                throw new Exception ("Re-enter password");
            }//end else-if
            else
            {
                throw new Exception ("");
            }//end else
            
        }//end try
        catch(Exception e){
              lblPass2Msg.setText(e.getMessage());
              /**
               * This feild does not need a regular expression
               * it will still throw the exception that the passwords
               * don't match if they enter something invalid
               */
        }//end catch
    }//GEN-LAST:event_txtPass2FocusLost

    private void txtFirstFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstFocusGained
        lblFirstMsg.setText("Letters can only be entered");
    }//GEN-LAST:event_txtFirstFocusGained

    private void txtFirstFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstFocusLost
        try{
            if (txtFirst.getText().length() == 0)
            {
                throw new Exception ("Enter first name");
            }
            else
            {
                String patt = "^[A-Za-z]+$";
                /**
                 * This regular expression only allows letters
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtFirst.getText());
                if (matcher.find())
                {
                    //clear if no error
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }//end else
            }//end else
        }//end try
        catch(Exception e){
               lblFirstMsg.setText(e.getMessage());
        }//end catch
    }//GEN-LAST:event_txtFirstFocusLost

    private void txtLastFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastFocusGained
        lblLastMsg.setText("Letters can only be entered");
    }//GEN-LAST:event_txtLastFocusGained

    private void txtLastFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastFocusLost
       try{
           if (txtLast.getText().length() == 0)
           {
               throw new Exception ("Enter last name");
           }
           else
           {
               String patt = "^[A-Za-z]+$";//only letters
               Pattern regPat = Pattern.compile(patt);
               Matcher matcher = regPat.matcher(txtLast.getText());
               if (matcher.find())
               {
                   throw new Exception ("");
               }
               else
               {
                   throw new Exception ("Only letters can be entered");
               }
           }//end else
       }//end try
       catch(Exception e){
              lblLastMsg.setText(e.getMessage());
       }//end catch
    }//GEN-LAST:event_txtLastFocusLost

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        /**
         * If the user already has a username and password
         * they can login by pressing the Login button
         * and they are presented by the login screen
         */
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        try{
            if (blankForm() == false)
            {
                //this checks if the form is blank before adding the details
                throw new Exception ("The form is blank");
            }
            else
            {
                if (valUser() == false || valPass1() == false || valPass2() == false || valPlace() == false || valDate() == false)
                {
                    /**
                     * If the from is not blank then the each field is checked
                     * for the validation rules before form gets submitted
                     */
                    throw new Exception ("Error on form");

                }
                else
                {
                    /**
                     * addUser is called when the form has passed all its
                     * validation rules
                     */
                    addUser();
                }
            }//end else
        }//end try
        catch(Exception e){
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtUser.setText("");
        txtPass1.setText("");
        txtPass2.setText("");
        txtFirst.setText("");
        txtLast.setText("");
        txtPlace.setText("");
        txtBirth.setText("");
        lblUserMsg.setText("");
        lblPass1Msg.setText("");
        lblPass2Msg.setText("");
        lblFirstMsg.setText("");
        lblLastMsg.setText("");
        lblPlaceMsg.setText("");
        lblDateMsg.setText("");
        lblError.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtPlaceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlaceFocusGained
        lblPlaceMsg.setText("Only letters can be entered");
    }//GEN-LAST:event_txtPlaceFocusGained

    private void txtPlaceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlaceFocusLost
        try{
            if (txtPlace.getText().length() == 0)
            {
                throw new Exception ("Enter place of birth");
            }
            else
            {
                String patt = "^[A-Za-z]+$";//only letters
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPlace.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters can be entered");
                }
            }//end else
        }//end try
        catch(Exception e){
            lblPlaceMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPlaceFocusLost

    private void txtBirthFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBirthFocusGained
        lblDateMsg.setText("Enter date in format DD/MM/YYYY");
    }//GEN-LAST:event_txtBirthFocusGained

    private void txtBirthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBirthFocusLost
        try{
            if (txtBirth.getText().length() == 0)
            {
                throw new Exception ("Enter date of birth");
            }
            else
            {
                String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";
                /**
                 * This is a regular expression for a date
                 * in the format DD/MM/YYYY ~ It does not do a range check
                 */
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtBirth.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Invalid date");
                }
            }//end else
        }//end try
        catch(Exception e){
            lblDateMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtBirthFocusLost
public boolean blankForm(){
    //this function checks if the form is blank before being sent
    boolean state = true;
    if (txtUser.getText().length() == 0)
    {
        state = false;
        lblUserMsg.setText("Enter username");
    }
    if (txtPass1.getText().length() == 0)
    {
        state = false;
        lblPass1Msg.setText("Enter password");
    }
    if (txtPass2.getText().length() == 0)
    {
        state = false;
        lblPass2Msg.setText("Re-enter password");
    }
    if (!txtPass2.getText().equals(txtPass1.getText()))
    {
        state = false;
        lblPass2Msg.setText("Passwords don't match");
    }
    if (txtFirst.getText().length() == 0)
    {
        state = false;
        lblFirstMsg.setText("Enter first name");
    }
    if (txtLast.getText().length() == 0)
    {
        state = false;
        lblLastMsg.setText("Enter last name");
    }
    if (txtPlace.getText().length() == 0)
    {
        state = false;
        lblPlaceMsg.setText("Enter place of birth");
    }
    if (txtBirth.getText().length() == 0)
    {
        state = false;
        lblDateMsg.setText("Enter date of birth");
    }
    return state;
}//END METHOD BLANKFORM
public boolean valUser(){
    //this validates the username
    boolean state = true;
    String patt = "^[A-Za-z0-9]+$";
    Pattern regPat = Pattern.compile(patt);
    String username = txtUser.getText();
    Matcher matcher = regPat.matcher(username);
    if (matcher.find())
    {
        state =  true;
        lblUserMsg.setText("");
    }
    else
    {
        state = false;
        lblUserMsg.setText("Only letters and numbers");
    }
    return state;
}//END METHOD VALUSER
public boolean valPass1 (){
    //this method validates the password
    boolean state = true;
    if (txtPass1.getText().equals(txtUser.getText()))
    {
        state = false;
        lblError.setText("Password and Username similar");
    }
    else
    {
        String patt = "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$";
        Pattern regPat = Pattern.compile(patt);
        Matcher matcher = regPat.matcher(txtPass1.getText());
        if (matcher.find())
        {
            lblError.setText("");
        }
        else
        {
            state = false;
            lblError.setText("Error on Password");
        }
    }
    return state;
}//END METHOD VALPASS1
public boolean valPass2(){
    boolean state = true;
    if (txtPass2.getText().equals(txtPass1.getText()))
    {
        state = true;
        lblPass2Msg.setText("");
    }
    else
    {
        state = false;
        lblPass2Msg.setText("The passwords don't match");
    }
    return state;
}
public boolean valFirst(){
    //this method validates first name
    boolean state = true;
    String patt = "^[A-Za-z]+$";//only letters can be entered
    Pattern regPat = Pattern.compile(patt);
    String first = txtFirst.getText();
    Matcher matcher = regPat.matcher(first);
    if (matcher.find())
    {
        state = true;
        lblFirstMsg.setText("");
    }
    else
    {
        state = false;
        lblFirstMsg.setText("Only letters");
    }
    return state;
}//END METHOD VALFIRST
public boolean valLast(){
    //this method validates last name
    boolean state = true;
    String patt = "^[A-Za-z]+$";
    Pattern regPat =  Pattern.compile(patt);
    String last = txtLast.getText();
    Matcher matcher = regPat.matcher(last);
    if (matcher.find())
    {
        state = true;
        lblLastMsg.setText("");
    }
    else
    {
        state = false;
        lblLastMsg.setText("Only letters");
    }
    return state;
}//END METHOD VALLAST
public boolean valPlace(){
    //validate place of birth
    boolean state = true;
    String patt = "^[A-Za-z]+$";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtPlace.getText());
    if (matcher.find())
    {
        state = true;
        lblPlaceMsg.setText("");
    }
    else
    {
        state = false;
        lblPlaceMsg.setText("Only letters can be entered");
    }
    return state;
}//END METHOD VALPLACE
public boolean valDate(){
    //validate date of birth
    boolean state = true;
    String patt = "^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtBirth.getText());
    if (matcher.find())
    {
        state = true;
        lblDateMsg.setText("");
    }
    else
    {
        state = false;
        lblDateMsg.setText("Invalid date");
    }
    return state;
}//END METHOD VALDATE
public void addUser(){
    //this adds the user to the database
    //set up variables
    String user =  txtUser.getText();
    String pass = txtPass1.getText();
    String first = txtFirst.getText();
    String last = txtLast.getText();
    String place = txtPlace.getText();
    String DOB = "";
    SimpleDateFormat inFmt = new SimpleDateFormat("dd/MM/yyyy");
    SimpleDateFormat outFmt = new SimpleDateFormat("yyyy-MM-dd");
    try{
        DOB = outFmt.format(inFmt.parse(txtBirth.getText()));
    }
    catch(ParseException e){
          System.err.println("ParseException Error: ");
          System.err.println(e.getMessage());
    }
    try{
        //connect to database
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        //enable SQL
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT into LOGIN (USER_NAME,PASSWORD,FIRST_NAME," +
                "LAST_NAME,BIRTH_PLACE,DATE_OF_BIRTH) VALUES('"+user+"','"+pass+"','"+first+"','"+last+"','"+place+"',{d'"+DOB+"'})");
        ResultSet result = stmt.executeQuery("SELECT * FROM LOGIN where USER_NAME = '"+user+"'");
        if (result.next())
        {
            lblError.setText("Details added");
            new AddingDetails().setVisible(true);
            this.dispose();
        }
        else
        {
            lblError.setText("Details not added");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//END METHOD ADDUSER
public void clear(){
    lblUserMsg.setText("");
    lblPass1Msg.setText("");
    lblPass2Msg.setText("");
    lblFirstMsg.setText("");
    lblLastMsg.setText("");
    lblPlaceMsg.setText("");
    lblDateMsg.setText("");
    lblError.setText("");
}
    /**
    * @param args the command line arguments
    */
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegisterUser().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JPanel Panel2;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel lblBirth;
    private javax.swing.JLabel lblDateMsg;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblFirst;
    private javax.swing.JLabel lblFirstMsg;
    private javax.swing.JLabel lblLast;
    private javax.swing.JLabel lblLastMsg;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPass1;
    private javax.swing.JLabel lblPass1Msg;
    private javax.swing.JLabel lblPass2;
    private javax.swing.JLabel lblPass2Msg;
    private javax.swing.JLabel lblPlace;
    private javax.swing.JLabel lblPlaceMsg;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUserMsg;
    private javax.swing.JLabel lblWelcome1;
    private javax.swing.JLabel lblWelcome2;
    private javax.swing.JTextField txtBirth;
    private javax.swing.JTextField txtFirst;
    private javax.swing.JTextField txtLast;
    private javax.swing.JPasswordField txtPass1;
    private javax.swing.JPasswordField txtPass2;
    private javax.swing.JTextField txtPlace;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

}
