/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InsertCW.java
 *
 * Created on 14-Jan-2011, 15:33:28
 */

package Project;
import java.awt.Color;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author kk
 */
public class InsertCW extends javax.swing.JFrame {

    /** Creates new form InsertCW */
    public InsertCW() {
        initComponents();
        displayClass();//Display all the records in the database
        clear();//clear all error labels on the form
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWel = new javax.swing.JLabel();
        lblClass = new javax.swing.JLabel();
        lblMax = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        txtClass = new javax.swing.JTextField();
        txtMax = new javax.swing.JTextField();
        lblClassMsg = new javax.swing.JLabel();
        lblMaxMsg = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClass = new javax.swing.JTable();
        btnProceed = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        bntMain = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Insert Class Work");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Class Work", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        lblWel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWel.setText("Enter the following details about the class work the pupils are doing:");

        lblClass.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblClass.setText("Class Work Title:");

        lblMax.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMax.setText("Max Score:");

        lblDescription.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblDescription.setText("Description:");

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        jScrollPane1.setViewportView(txtDesc);

        txtClass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClassFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtClassFocusLost(evt);
            }
        });

        txtMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMaxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaxFocusLost(evt);
            }
        });

        lblClassMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblClassMsg.setText("jLabel5");

        lblMaxMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMaxMsg.setText("jLabel6");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDescription)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblClass)
                                    .addComponent(lblMax))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMax, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(txtClass))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMaxMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(lblClassMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(btnAdd))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblClass, lblDescription, lblMax});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, txtClass, txtMax});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblClass)
                    .addComponent(txtClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClassMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMax)
                    .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaxMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescription)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAdd)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Class Work Title", "Max Score", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblClass);

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("jLabel1");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        bntMain.setText("Main Menu");
        bntMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntMainActionPerformed(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblSearch.setText("Search:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnShow.setText("Show All Data");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShow))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnProceed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntMain))
                    .addComponent(lblMessage))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bntMain, btnDelete, btnEdit, btnProceed});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProceed)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(bntMain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtClassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClassFocusGained
        lblClassMsg.setText("Only letters and numbers");
    }//GEN-LAST:event_txtClassFocusGained

    private void txtClassFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClassFocusLost
        try{
            if (txtClass.getText().isEmpty())
            {
                throw new Exception ("Enter class work title");
            }
            else if (lengthTitle() == false)
            {
                throw new Exception ("Title too long");
            }
            else
            {
                String patt = "^[A-Za-z0-9\\s]+$";
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtClass.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Only letters and numbers");
                }
            }//end else
        }//end try
        catch(Exception e){
            lblClassMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtClassFocusLost

    private void txtMaxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaxFocusGained
        lblMaxMsg.setText("Only numbers can be entered");
    }//GEN-LAST:event_txtMaxFocusGained

    private void txtMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaxFocusLost
        try{
            if (txtMax.getText().isEmpty())
            {
                throw new Exception ("Enter max score");
            }
            else
            {
                String patt = "^[0-9]+$";//only numbers
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtMax.getText());
                if (matcher.find())
                {
                    throw new Exception ("");
                }
                else
                {
                    throw new Exception ("Invalid number");
                }
            }//end else
        }//end try
        catch(Exception e){
               lblMaxMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtMaxFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try{
            if (blankForm() == false)//check for a blank form
            {
                throw new Exception ("The form is blank");
            }
            else
            {
                if (valTitle() == false || valScore() == false || lengthTitle() == false)//check that all the text feilds follow the validation rules
                {
                    throw new Exception ("Error on form");
                }
                else
                {
                    checkDatabase();//check that the record does not ready exsists
                }
            }//end else
        }
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        getValues();
    }//GEN-LAST:event_btnProceedActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        edit();
}//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblClass.getSelectedRow();
        try{
            if (row == -1)//check that a row has been selected
            {
                throw new Exception ("Row not selected");
            }
            else
            {
                int n = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete "+tblClass.getValueAt(row, 0)+" from the databse?","Delete class work",JOptionPane.YES_NO_OPTION);//this displays a dialog box asking the user if they are sure that they want to delete a record
                switch (n)
                {
                    case 0 : deleteRecord(); break;//if "Yes" is pressed then the record is deleted
                    case 1 : break;//if "No" is pressed then the dialog box closes
                }
            }//end else
        }//end try
        catch(Exception e){
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void bntMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntMainActionPerformed
        new MainMenu().setVisible(true);
        this.dispose();
}//GEN-LAST:event_bntMainActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        displayClass();
    }//GEN-LAST:event_btnShowActionPerformed
public void addClass(){
    //this adds a classwork to the record
    String classTitle = txtClass.getText();
    int max = 0;
    String description = txtDesc.getText();
    try{
        max = Integer.parseInt(txtMax.getText());
    }
    catch(NumberFormatException e){
        System.err.print("ParseException: ");
        System.err.println(e.getMessage());
    }//END CATCH
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        String query = "INSERT INTO CLASS_WORK(CLASS_WORK_TITLE,MAX_SCORE,DESCRIPTION)VALUES('"+classTitle+"',"+max+",'"+description+"')";
        stmt.execute(query);//add the record
        ResultSet result =  stmt.executeQuery("SELECT * FROM CLASS_WORK where CLASS_WORK_TITLE='"+classTitle+"'");//check that the record has been added
        if (result.next())
        {
            lblMessage.setForeground(Color.BLACK);
            lblMessage.setText("Added");
            displayClass();//display all records if the record has been added
            clear();//clear the text feilds
        }
        else
        {
            lblMessage.setText("Not added");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
             System.err.print("SQLException: ");
             System.err.println(ex.getMessage());
    }//END CATCH
}//END METHOD CLASS
public void displayClass(){
    //display all the records in the database
    String classTitle = "";
    int max = 0;
    String description = "";
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        String query = "SELECT * FROM CLASS_WORK";
        ResultSet result = stmt.executeQuery(query);
        DefaultTableModel model = (DefaultTableModel)tblClass.getModel();
        while (model.getRowCount()>0)//clear the table
        {
            model.removeRow(0);
        }
        if (result!=null)
        {
            while (result.next())
            {
                classTitle = result.getString("CLASS_WORK_TITLE");
                max = result.getInt("MAX_SCORE");
                description = result.getString("DESCRIPTION");
                model.addRow(new Object[]{classTitle,max,description});
                //add each record to the table
            }
        }
        else
        {
            lblMessage.setText("No records");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }//END CATCH
}//END METHOD DISPLAYCLASS
public void getValues(){
    //get the values from the table to add a pupil who has done this peice of classwork
    String pupil = "";
    int row = tblClass.getSelectedRow();//get the selected row
    try{
        if (row == -1)//check that a row is selected
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            //put the values obtained from the table into variables
            String classTitle = (String)tblClass.getValueAt(row, 0);
            int max = (Integer)tblClass.getValueAt(row, 1);
            String description = (String)tblClass.getValueAt(row, 2);
            //pass these variables to another from
            new InsertScoreClass(classTitle,max,description).setVisible(true);
            this.dispose();
        }
    }
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
}//END METHOD
public void edit(){
    //edit the record
    int row = tblClass.getSelectedRow();
    try{
        if (row == -1)//check that a row has been selected
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            //get the values that are going to the edited
            String classTitle = (String)tblClass.getValueAt(row, 0);
            int max = (Integer)tblClass.getValueAt(row, 1);
            String description = (String)tblClass.getValueAt(row, 2);
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("UPDATE CLASS_WORK SET CLASS_WORK_TITLE='"+classTitle+"',MAX_SCORE="+max+",DESCRIPTION='"+description+"'where CLASS_WORK_TITLE='"+classTitle+"'");
                ResultSet result = stmt.executeQuery("SELECT * FROM CLASS_WORK where CLASS_WORK_TITLE='"+classTitle+"'");//check that the record has been updated
                if (result.next())
                {
                    lblMessage.setText("Details changed");
                    displayClass();//display all the records
                }
                else
                {
                    lblMessage.setText("Details have not changed");
                }
                stmt.close();
                conn.close();
                result.close();
            }//end second try
            catch(Exception ex){
                System.err.print("SQLEXCEPTION: ");
                System.err.println(ex.getMessage());
            }//end second catch
        }
    }//end first try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }//end first catch
}//END METHOD
public void deleteRecord(){
    //delete a record
    int row = tblClass.getSelectedRow();
    try{
       if (row == -1)//check that a row has been seleted
       {
           throw new Exception ("Row not selected");
       }
       else
       {
           String classTitle = (String)tblClass.getValueAt(row, 0);//get the primary key from the table so it can be used to delete a record
           try{
               DatabaseConnect.init();
               Connection conn = DatabaseConnect.getConnection();
               Statement stmt = conn.createStatement();
               stmt.executeUpdate("DELETE FROM CLASS_WORK WHERE CLASS_WORK_TITLE='"+classTitle+"'");
               ResultSet result = stmt.executeQuery("SELECT * FROM CLASS_WORK WHERE CLASS_WORK_TITLE='"+classTitle+"'");//check that the record has been deleted
               if (result.next())
               {
                   lblMessage.setText("Not deleted");
               }
               else
               {
                   lblMessage.setText("Record deleted");
                   displayClass();
               }
               stmt.close();
               conn.close();
               result.close();
           }//end try
           catch(Exception ex){
               System.err.print("SQLException: ");
               System.err.println(ex.getMessage());
           }
       }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
}//END METHOD
public void clear(){
    //clear all text feilds
    txtClass.setText("");
    txtMax.setText("");
    txtDesc.setText("");
    lblClassMsg.setText("");
    lblMaxMsg.setText("");
}//END METHOD
public void search(){
    //this method searches for Class work based on the class work title
    String search = txtSearch.getText();
    String classTitle = "";
    int score = 0;
    String desc = "";
    boolean found = false;
    try{
        if (search.isEmpty())
        {
            throw new Exception ("Search feild empty");
        }
        else
        {
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery("SELECT * FROM CLASS_WORK WHERE CLASS_WORK_TITLE='" + search + "'");
                DefaultTableModel model = (DefaultTableModel) tblClass.getModel();
                if (result != null && result.next())
                {
                    classTitle = result.getString("CLASS_WORK_TITLE");
                    score = result.getInt("MAX_SCORE");
                    desc = result.getString("DESCRIPTION");
                    found = true;
                }
                else
                {
                    while (model.getRowCount() > 0)
                    {
                        model.removeRow(0);
                    }
                    lblMessage.setText("No Records have been found");
                }
                if (found == true)
                {
                    while (model.getRowCount() > 0)
                    {
                        model.removeRow(0);
                    }
                    model.addRow(new Object[]{classTitle, score, desc});
                }
                txtSearch.setText("");
                lblMessage.setText("");
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch (Exception ex) {
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
}//END METHOD
public void checkDatabase(){
    //this checks if the record already exists in the database
    String title = txtClass.getText();
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT * FROM CLASS_WORK WHERE CLASS_WORK_TITLE='"+title+"'");
        if (result.next())
        {
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("The record already exsists");
        }
        else
        {
            addClass();//add the record
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
public boolean blankForm(){
    //check for a blank from
    boolean state = true;
    if (txtClass.getText().isEmpty())
    {
        state = false;
        lblClassMsg.setForeground(Color.RED);
        lblClassMsg.setText("Enter class work title");
    }
    else
    {
        valTitle();
    }
    if (txtMax.getText().isEmpty())
    {
        state = false;
        lblMaxMsg.setForeground(Color.RED);
        lblMaxMsg.setText("Enter Max Score");
    }
    else
    {
        valScore();
    }
    return state;
}//end method
public boolean valTitle(){
    //validate the classwork title
    boolean state = true;
    String patt = "^[A-Za-z0-9\\s]+$";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtClass.getText());
    if (matcher.find())
    {
        state = true;
        lblClassMsg.setText("");
    }
    else
    {
        state = false;
        lblClassMsg.setText("Error");
    }
    return state;
}//END METHOD
public boolean valScore(){
    //validates the score
    boolean state = true;
    try{
        int points = Integer.parseInt(txtMax.getText());
    }
    catch(NumberFormatException e){
        lblMaxMsg.setText(e.getMessage());
        state = false;
    }
    lblMaxMsg.setText("");
    return state;
}//END METHOD
public boolean lengthTitle(){
    //this checks the length of the class work title
    boolean state = true;
    if (txtClass.getText().length()>20)
    {
        state = false;
        lblClassMsg.setText("Title too long");
    }
    return state;
}

    /**
    * @param args the command line arguments
    */
/*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertCW().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntMain;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClass;
    private javax.swing.JLabel lblClassMsg;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMaxMsg;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblWel;
    private javax.swing.JTable tblClass;
    private javax.swing.JTextField txtClass;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
