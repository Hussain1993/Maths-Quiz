/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InsertHWScore.java
 *
 * Created on 20-Jan-2011, 15:33:41
 */

package Project;
import java.awt.Color;
import java.awt.print.PrinterException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
/**
 *
 * @author aa08545
 */
public class InsertHWScore extends javax.swing.JFrame {

    /** Creates new form InsertHWScore */
    String hwTitle = "";
    int maxScore = 0;
    public InsertHWScore(String title,int max) {
        initComponents();
        lblWel.setText("You are now adding the details of the following Homework: '"+title+"'");//this tells the user of which homework they are adding a pupil for
        txtHWTitle.setText(title);
        hwTitle = title;
        maxScore = max;
        display();//display all records
        clearStart();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWel = new javax.swing.JLabel();
        lblHWTitle = new javax.swing.JLabel();
        lblPupilNum = new javax.swing.JLabel();
        lblFirst = new javax.swing.JLabel();
        lblLast = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        txtHWTitle = new javax.swing.JTextField();
        txtPupilNum = new javax.swing.JTextField();
        txtFirst = new javax.swing.JTextField();
        txtLast = new javax.swing.JTextField();
        txtScore = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        lblPupilNumMsg = new javax.swing.JLabel();
        lblFirstMsg = new javax.swing.JLabel();
        lblLastMsg = new javax.swing.JLabel();
        lblScoreMsg = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHW = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Insert Homework Score");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Homework Score", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(535, 216));

        lblWel.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblWel.setText("jLabel1");

        lblHWTitle.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblHWTitle.setText("Homework Title:");

        lblPupilNum.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPupilNum.setText("Pupil Number:");

        lblFirst.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFirst.setText("First Name:");

        lblLast.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblLast.setText("Last Name:");

        lblScore.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScore.setText("Score:");

        txtHWTitle.setEditable(false);

        txtPupilNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPupilNumFocusLost(evt);
            }
        });

        txtScore.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtScoreFocusLost(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblPupilNumMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblPupilNumMsg.setText("jLabel1");

        lblFirstMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblFirstMsg.setText("jLabel2");

        lblLastMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblLastMsg.setText("jLabel3");

        lblScoreMsg.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblScoreMsg.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblHWTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHWTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPupilNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPupilNum, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirst, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLast)
                            .addComponent(lblScore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtScore, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(txtLast, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPupilNumMsg)
                    .addComponent(lblFirstMsg)
                    .addComponent(lblLastMsg)
                    .addComponent(lblScoreMsg))
                .addGap(240, 240, 240))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnAdd)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblFirst, lblHWTitle, lblLast, lblPupilNum, lblScore});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFirst, txtHWTitle, txtLast, txtPupilNum, txtScore});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblWel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHWTitle)
                    .addComponent(txtHWTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPupilNum)
                    .addComponent(txtPupilNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPupilNumMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirst)
                    .addComponent(txtFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLast)
                    .addComponent(txtLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScore)
                    .addComponent(txtScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScoreMsg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblSearch.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblSearch.setText("Search:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnShow.setText("Show All Data");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        tblHW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Pupil Number", "First Name", "Last Name", "Homework Title", "Score", "Max Score", "Percentage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHW);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project/resources/Trash_32.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 12));
        lblMessage.setText("jLabel11");

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project/resources/Print_32.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShow))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMessage)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack, btnDelete, btnEdit});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnEdit)
                    .addComponent(btnPrint)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPupilNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPupilNumFocusLost
        try{
            if (txtPupilNum.getText().isEmpty())
            {
                throw new Exception ("Enter pupil number");
            }
            else
            {
                String patt = "^[A-Z]{1}([0-9]{4})";
                Pattern regPat = Pattern.compile(patt);
                Matcher matcher = regPat.matcher(txtPupilNum.getText());
                if (matcher.find())
                {
                    lblPupilNumMsg.setForeground(Color.BLACK);
                    lblPupilNumMsg.setText("");
                }
                else
                {
                    throw new Exception ("Error");
                }
                getFirstLast();//this gets the first and last name of the pupil
            }
        }//end try
        catch(Exception e){
            lblPupilNumMsg.setForeground(Color.RED);
            lblPupilNumMsg.setText(e.getMessage());
        }
    }//GEN-LAST:event_txtPupilNumFocusLost

    private void txtScoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtScoreFocusLost
        int score = 0;
        try{
            score = Integer.parseInt(txtScore.getText());
        }
        catch(NumberFormatException e){
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("Invalid number");
        }
        if (score > maxScore)//check that the score entered is greater than the max score of the homework
        {
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("Score greater than max score; Max score "+maxScore+"");
        }
    }//GEN-LAST:event_txtScoreFocusLost

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try{
            if (blankForm() == false)
            {
                throw new Exception ("The form is blank");
            }
            else
            {
                   if (valScore() == false || valNum() == false)
                   {
                       throw new Exception ("Error");
                   }
            }
            checkDatabase();//check if a record already exsists
        }
        catch(Exception e){
            lblMessage.setForeground(Color.RED);
            lblMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // This goes back to previous form
        this.dispose();
        new InsertHW().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        display();
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
         edit();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       int row = tblHW.getSelectedRow();
       try{
           if (row == -1)
           {
               throw new Exception ("Row not selected");
           }
           else
           {
               int n = JOptionPane.showConfirmDialog(this, "Are you sure that you want to delete this record","Delete record",JOptionPane.YES_NO_OPTION);//this asks a user if they are sure if they wnat to delete a recrod from the database
               switch (n)
               {
                   case 0 : delete(); break;//this is called if they press "Yes"
                   case 1 : break;//pressing "No"
               }
           }
       }//end try
       catch(Exception e){
           lblMessage.setText(e.getMessage());
       }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        search();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        int n = JOptionPane.showConfirmDialog(this, "Are you sure that you want to print this table?","Print Table",JOptionPane.YES_NO_OPTION);//this asks the user if they are sure that they want to print the table
        switch (n)
        {
            case 0 : try {
            print();//print the table
        }
        catch (PrinterException ex) {
        Logger.getLogger(InsertHWScore.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch
            break;//pressing "Yes"
            case 1 : break;//pressing "No"
        }
}//GEN-LAST:event_btnPrintActionPerformed
public void add(){
    //add a pupil who has done this peice of homework
    String pupilNum = txtPupilNum.getText();
    int score = 0;
    try{
        score = Integer.parseInt(txtScore.getText());
    }
    catch(NumberFormatException e){
        lblMessage.setForeground(Color.RED);
        lblMessage.setText("Invalid number");
    }//end catch
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        String query = "INSERT INTO PUPIL_HOMEWORK (HOMEWORK_TITLE,PUPIL_NUMBER,HOMEWORK_SCORE)VALUES ('"+hwTitle+"','"+pupilNum+"',"+score+")";
        stmt.execute(query);//add the record
        ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"' AND PUPIL_NUMBER='"+pupilNum+"'");//check if the record has been added
        if (result.next())
        {
            display();//display all the records in a table
            clear();
        }
        else
        {
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("Details not added");
        }
        stmt.close();
        conn.close();
        result.close();
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }//end catch
}//end method
public void delete(){
    //delete a record
    int row = tblHW.getSelectedRow();
    try{
        if (row == -1)
        {
            throw new Exception("Row not selected");
        }
        else
        {
            //get the two composite keys from the interface table to delete a record
            String pupilNum = (String)tblHW.getValueAt(row, 0);
            String title = (String)tblHW.getValueAt(row, 3);
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("DELETE FROM PUPIL_HOMEWORK WHERE HOMEWORK_TITLE='"+title+"' AND PUPIL_NUMBER='"+pupilNum+"'");
                ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_HOMEWORK WHERE HOMEWORK_TITLE='"+title+"' AND PUPIL_NUMBER='"+pupilNum+"'");
                if (result.next())
                {
                    lblMessage.setForeground(Color.RED);
                    lblMessage.setText("Record not deleted");
                }
                else
                {
                    lblMessage.setForeground(Color.BLACK);
                    lblMessage.setText("The record has been deleted");
                    display();//display all the records
                }
                stmt.close();
                conn.close();
                result.close();
            }//end try
            catch(Exception ex){
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }//end catch
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }//end catch
}//end method
public void edit(){
    //this edits a record
    int row = tblHW.getSelectedRow();
    try{
        if (row == -1)
        {
            throw new Exception ("Row not selected");
        }
        else
        {
            String pupilNum = (String)tblHW.getValueAt(row, 0);
            String first = (String)tblHW.getValueAt(row, 1);
            String last = (String)tblHW.getValueAt(row, 2);
            String title = (String)tblHW.getValueAt(row, 3);
            double score = (Integer)tblHW.getValueAt(row, 4);
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                String query1 = "UPDATE PUPIL_HOMEWORK SET HOMEWORK_TITLE='"+title+"',PUPIL_NUMBER='"+pupilNum+"',HOMEWORK_SCORE="+score+" WHERE HOMEWORK_TITLE='"+title+"' AND PUPIL_NUMBER='"+pupilNum+"'";
                String query2 = "UPDATE PUPILS SET PUPIL_FIRST_NAME='"+first+"',PUPIL_LAST_NAME='"+last+"' WHERE PUPIL_NUMBER='"+pupilNum+"'";
                stmt.executeUpdate(query1);
                stmt.executeUpdate(query2);
                ResultSet result =  stmt.executeQuery("SELECT * FROM PUPIL_HOMEWORK WHERE HOMEWORK_TITLE='"+title+"' AND PUPIL_NUMBER='"+pupilNum+"'");
                if (result.next())
                {
                    display();//diaply all the records
                }
                else
                {
                    lblMessage.setForeground(Color.RED);
                    lblMessage.setText("Error - changing details");
                }
                stmt.close();
                conn.close();
                result.close();
            }//end catch
            catch(Exception ex){
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }
        }//end else
    }// end catch
    catch(Exception e){
        lblMessage.setForeground(Color.RED);
        lblMessage.setText(e.getMessage());
    }//end catch
}//end method
public void search(){
    //this searchs for a pupil homework record by first name or homework title
    String search = txtSearch.getText();
    String pupilNum = "";
    String first = "";
    String last = "";
    String title = "";
    double score = 0;
    double max = 0;
    double percent = 0;
    try{
        if (search.isEmpty())
        {
            throw new Exception ("Search feild empty");
        }
        else
        {
            try{
                DatabaseConnect.init();
                Connection conn = DatabaseConnect.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet result = stmt.executeQuery("SELECT PUPIL_HOMEWORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_HOMEWORK.HOMEWORK_TITLE,PUPIL_HOMEWORK.HOMEWORK_SCORE,HOMEWORK.MAX_SCORE FROM PUPIL_HOMEWORK,PUPILS,HOMEWORK WHERE PUPIL_HOMEWORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_HOMEWORK.HOMEWORK_TITLE=HOMEWORK.HOMEWORK_TITLE AND (PUPILS.PUPIL_FIRST_NAME='"+search+"' OR PUPIL_HOMEWORK.HOMEWORK_TITLE='"+search+"') ORDER BY HOMEWORK_SCORE");
                DefaultTableModel model = (DefaultTableModel) tblHW.getModel();
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }
                if (result != null)
                {
                    while (result.next())
                    {
                        pupilNum = result.getString("PUPIL_NUMBER");
                        first = result.getString("PUPIL_FIRST_NAME");
                        last = result.getString("PUPIL_LAST_NAME");
                        title = result.getString("HOMEWORK_TITLE");
                        score = result.getInt("HOMEWORK_SCORE");
                        max = result.getInt("MAX_SCORE");
                        percent = Math.floor((score/max)*100);//work out percentage and round the number down to the nearest integer
                        //change everything to int
                        int scoreI = (int)score;
                        int maxI = (int)max;
                        int percentI = (int)percent;
                        model.addRow(new Object[]{pupilNum, first, last, title, scoreI,maxI,percentI});
                    }
                }
                else if (result.next() == false)
                {
                    lblMessage.setText("No records have been found");
                }
                stmt.close();
                conn.close();
                result.close();
                txtSearch.setText("");
                lblMessage.setText("");
            }//end try
            catch (Exception ex) {
                System.err.print("SQLException: ");
                System.err.println(ex.getMessage());
            }
        }//end else
    }//end try
    catch(Exception e){
        lblMessage.setText(e.getMessage());
    }
    
}//end method
public void display(){
    //display all the records in the database
    String pupilNum = "";
    String first = "";
    String last = "";
    String title = "";
    double score = 0;
    double max = 0;
    double percent = 0;
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT PUPIL_HOMEWORK.PUPIL_NUMBER,PUPILS.PUPIL_FIRST_NAME,PUPILS.PUPIL_LAST_NAME,PUPIL_HOMEWORK.HOMEWORK_TITLE,PUPIL_HOMEWORK.HOMEWORK_SCORE,HOMEWORK.MAX_SCORE FROM PUPIL_HOMEWORK,PUPILS,HOMEWORK WHERE PUPIL_HOMEWORK.PUPIL_NUMBER=PUPILS.PUPIL_NUMBER AND PUPIL_HOMEWORK.HOMEWORK_TITLE=HOMEWORK.HOMEWORK_TITLE ORDER BY PUPIL_NUMBER");
        DefaultTableModel model = (DefaultTableModel)tblHW.getModel();
        if (result != null)
        {
            while (model.getRowCount()>0)
            {
                model.removeRow(0);
            }
            while (result.next())
            {
                pupilNum = result.getString("PUPIL_NUMBER");
                first = result.getString("PUPIL_FIRST_NAME");
                last = result.getString("PUPIL_LAST_NAME");
                title = result.getString("HOMEWORK_TITLE");
                score = result.getInt("HOMEWORK_SCORE");
                max = result.getInt("MAX_SCORE");
                percent = Math.floor((score/max)*100);//work out precentage of the score and round the number down to the nearest integer
                //change everything to int
                int scoreI = (int)score;
                int maxI = (int)max;
                int percentI = (int)percent;
                model.addRow(new Object[]{pupilNum,first,last,title,scoreI,maxI,percentI});
            }
        }//end if
        else
        {
            lblMessage.setText("Error");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
}//end method
public void getFirstLast(){
    //get the pupils first and last name from the database and display them in the user interface
    String pupilNum = txtPupilNum.getText();
    String first = "";
    String last = "";
    boolean found = false;
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT PUPIL_FIRST_NAME,PUPIL_LAST_NAME FROM PUPILS WHERE PUPIL_NUMBER='"+pupilNum+"'");
        if (result != null && result.next())
        {
            found = true;
            first = result.getString("PUPIL_FIRST_NAME");
            last = result.getString("PUPIL_LAST_NAME");
        }
        else
        {
            found = false;
            lblFirstMsg.setForeground(Color.RED);
            lblLastMsg.setForeground(Color.RED);
            lblFirstMsg.setText("Name not found");
            lblLastMsg.setText("Name not found");
        }
        if (found == true)
        {
            txtFirst.setText(first);//display the name on a text feild
            txtLast.setText(last);
            lblFirstMsg.setForeground(Color.BLACK);
            lblLastMsg.setForeground(Color.BLACK);
            lblFirstMsg.setText("");
            lblLastMsg.setText("");
        }
        stmt.close();
        conn.close();
        result.close();
    }//end try
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }//end catch
}//end method
public boolean blankForm(){
    //this checks for a blank form
    boolean state = true;
    if (txtPupilNum.getText().isEmpty())
    {
        lblPupilNumMsg.setForeground(Color.RED);
        lblPupilNumMsg.setText("Enter pupil number");
        state = false;
    }
    else
    {
        valNum();
    }
    if (txtScore.getText().isEmpty())
    {
        lblScoreMsg.setForeground(Color.RED);
        lblScoreMsg.setText("Enter score");
        state = false;
    }
    else
    {
        valScore();
    }
    if (txtFirst.getText().isEmpty())
    {
        state = false;
        lblFirstMsg.setForeground(Color.RED);
        lblFirstMsg.setText("Enter first name");
    }
    if (txtLast.getText().isEmpty())
    {
        state = false;
        lblLastMsg.setForeground(Color.RED);
        lblLastMsg.setText("Enter last name");
    }
    return state;
}//end method
public boolean valScore(){
    //validate the score entered
    boolean state = true;
    try{
        int score = Integer.parseInt(txtScore.getText());
        if (score > maxScore)
        {
            state = false;
            lblScoreMsg.setForeground(Color.RED);
            lblScoreMsg.setText("Max score is: "+maxScore);
        }
    }
    catch(NumberFormatException e){
        lblScoreMsg.setForeground(Color.RED);
        lblScoreMsg.setText("Invalid number "+e.getMessage());
        state = false;
    }
    return state;
}//end method
public boolean valNum(){
    //validate pupil number
    boolean state = true;
    String patt = "^[A-Z]{1}([0-9]{4})";
    Pattern regPat = Pattern.compile(patt);
    Matcher matcher = regPat.matcher(txtPupilNum.getText());
    if (matcher.find())
    {
        lblPupilNumMsg.setText("");
    }
    else
    {
        lblPupilNumMsg.setForeground(Color.RED);
        lblPupilNumMsg.setText("Error");
        state = false;
    }
    return state;
}//end method
    public void clearStart(){
        //clear the from at the start
    txtPupilNum.setText("");
    txtFirst.setText("");
    txtLast.setText("");
    txtScore.setText("");
    lblPupilNumMsg.setText("");
    lblFirstMsg.setText("");
    lblLastMsg.setText("");
    lblScoreMsg.setText("");
    lblMessage.setText("");
}//end method
public void clear (){
    //clear the from when a record has been added
    txtPupilNum.setText("");
    txtFirst.setText("");
    txtLast.setText("");
    txtScore.setText("");
    lblPupilNumMsg.setText("");
    lblFirstMsg.setText("");
    lblLastMsg.setText("");
    lblScoreMsg.setText("");
    lblMessage.setText("");
}//end method
public boolean checkDatabase(){
    //check if the record already exsists
    boolean isThere = false;
    String pupilNum = txtPupilNum.getText();
    try{
        DatabaseConnect.init();
        Connection conn = DatabaseConnect.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery("SELECT * FROM PUPIL_HOMEWORK WHERE HOMEWORK_TITLE='"+hwTitle+"' AND PUPIL_NUMBER='"+pupilNum+"'");
        if (result.next())
        {
            isThere = true;
            lblMessage.setForeground(Color.RED);
            lblMessage.setText("This record already exists");
            clear();
        }
        else
        {
            add();//add the record if it is not there
        }
    }
    catch(Exception ex){
        System.err.print("SQLException: ");
        System.err.println(ex.getMessage());
    }
    return isThere;
}
    /**
    * @param args the command line arguments
    */
public void print() throws PrinterException{
    //this method prints out the table that is in the user interface
    tblHW.print();
}//end method
    /**
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertHWScore().setVisible(true);
            }
        });
    }
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirst;
    private javax.swing.JLabel lblFirstMsg;
    private javax.swing.JLabel lblHWTitle;
    private javax.swing.JLabel lblLast;
    private javax.swing.JLabel lblLastMsg;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPupilNum;
    private javax.swing.JLabel lblPupilNumMsg;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblScoreMsg;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblWel;
    private javax.swing.JTable tblHW;
    private javax.swing.JTextField txtFirst;
    private javax.swing.JTextField txtHWTitle;
    private javax.swing.JTextField txtLast;
    private javax.swing.JTextField txtPupilNum;
    private javax.swing.JTextField txtScore;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
